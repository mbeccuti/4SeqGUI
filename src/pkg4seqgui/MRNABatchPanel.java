/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package pkg4seqgui;
import java.awt.CardLayout;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.util.Timer;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
/**
 *
 * @author user
 */
public class MRNABatchPanel extends javax.swing.JPanel {

    /**
     * Creates new form MRNABatchPanel
     */
    public MRNABatchPanel() {
        initComponents();
    }
    
    private static final long serialVersionUID = 57756123321L;
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        mRNABatchPanel = new javax.swing.JPanel();
        jPanel27 = new javax.swing.JPanel();
        jScrollPane7 = new javax.swing.JScrollPane();
        CCountHeaderTable = new javax.swing.JTable();
        CCovInputFileText = new javax.swing.JTextField();
        Cinbrowes = new javax.swing.JButton();
        Cincancel = new javax.swing.JButton();
        jLabel98 = new javax.swing.JLabel();
        jLabel97 = new javax.swing.JLabel();
        COutputFolderText = new javax.swing.JTextField();
        Coutbrowes = new javax.swing.JButton();
        Coutcancel = new javax.swing.JButton();
        FExecuteButton1 = new javax.swing.JButton();
        FSaveButton1 = new javax.swing.JButton();
        CResetButton1 = new javax.swing.JButton();
        CCloseButton1 = new javax.swing.JButton();

        setLayout(new java.awt.GridBagLayout());

        mRNABatchPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEmptyBorder(30, 1, 1, 1), "Adding covariates and batch information", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 1, 14), new java.awt.Color(0, 153, 153))); // NOI18N
        mRNABatchPanel.setLayout(new java.awt.GridBagLayout());

        jPanel27.setBackground(new java.awt.Color(248, 248, 248));
        jPanel27.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        jPanel27.setToolTipText("the all.counts.txt file generated from miRNAseq step");
        jPanel27.setLayout(new java.awt.GridBagLayout());

        CCountHeaderTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Count Header", "Grouping", "Batch"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Object.class, java.lang.Object.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        CCountHeaderTable.setSelectionMode(javax.swing.ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
        CCountHeaderTable.getTableHeader().setReorderingAllowed(false);
        jScrollPane7.setViewportView(CCountHeaderTable);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        jPanel27.add(jScrollPane7, gridBagConstraints);

        CCovInputFileText.setEditable(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        jPanel27.add(CCovInputFileText, gridBagConstraints);

        Cinbrowes.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pkg4seqgui/images/fileb.png"))); // NOI18N
        Cinbrowes.setText("Browse");
        Cinbrowes.setToolTipText("");
        Cinbrowes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CinbrowesActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        jPanel27.add(Cinbrowes, gridBagConstraints);

        Cincancel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pkg4seqgui/images/33b.png"))); // NOI18N
        Cincancel.setText("Cancel");
        Cincancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CincancelActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        jPanel27.add(Cincancel, gridBagConstraints);

        jLabel98.setText("Output Folder:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        jPanel27.add(jLabel98, gridBagConstraints);

        jLabel97.setText("Count file:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        jPanel27.add(jLabel97, gridBagConstraints);

        COutputFolderText.setEditable(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 0.4;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        jPanel27.add(COutputFolderText, gridBagConstraints);

        Coutbrowes.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pkg4seqgui/images/52b.png"))); // NOI18N
        Coutbrowes.setText("Browse");
        Coutbrowes.setToolTipText("");
        Coutbrowes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CoutbrowesActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        gridBagConstraints.weighty = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        jPanel27.add(Coutbrowes, gridBagConstraints);

        Coutcancel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pkg4seqgui/images/33b.png"))); // NOI18N
        Coutcancel.setText("Cancel");
        Coutcancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CoutcancelActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.BASELINE_TRAILING;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        jPanel27.add(Coutcancel, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        mRNABatchPanel.add(jPanel27, gridBagConstraints);

        FExecuteButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pkg4seqgui/images/exec.png"))); // NOI18N
        FExecuteButton1.setText("Execute");
        FExecuteButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FExecuteButton1ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_END;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.weighty = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        mRNABatchPanel.add(FExecuteButton1, gridBagConstraints);

        FSaveButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pkg4seqgui/images/86b.png"))); // NOI18N
        FSaveButton1.setText("Save conf.");
        FSaveButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FSaveButton1ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_END;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        mRNABatchPanel.add(FSaveButton1, gridBagConstraints);

        CResetButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pkg4seqgui/images/reset.png"))); // NOI18N
        CResetButton1.setText("Reset");
        CResetButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CResetButton1ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_END;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        mRNABatchPanel.add(CResetButton1, gridBagConstraints);

        CCloseButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pkg4seqgui/images/close.png"))); // NOI18N
        CCloseButton1.setText("Close");
        CCloseButton1.setToolTipText("");
        CCloseButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CCloseButton1ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_END;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        mRNABatchPanel.add(CCloseButton1, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.weighty = 0.1;
        add(mRNABatchPanel, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

    private void CinbrowesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CinbrowesActionPerformed
        JFileChooser openDir = new JFileChooser();
        //reseting header table
        while( CCountHeaderTable.getRowCount()!=0){
            DefaultTableModel model = (DefaultTableModel) CCountHeaderTable.getModel();
            model.removeRow(0);
        }
        //reseting header table
        if (!(CCovInputFileText.getText().equals(""))){
            File file =new File(CCovInputFileText.getText());
            if (file.isDirectory())
            openDir.setCurrentDirectory(file);
        }
        else
        {
            String curDir = MainFrame.getPreferences().get("open-dir", null);
            openDir.setCurrentDirectory(curDir!=null ? new File(curDir) : null);
        }
        openDir.setFileSelectionMode(JFileChooser.FILES_ONLY);
        if (openDir.showOpenDialog(this)==JFileChooser.APPROVE_OPTION){
            File f = openDir.getSelectedFile();
            try{
                FileReader fw = new FileReader(f.getAbsoluteFile());
                try (BufferedReader br = new BufferedReader(fw)) {
                    String header = br.readLine();
                    DefaultTableModel model = (DefaultTableModel) CCountHeaderTable.getModel();
                    for (String retval:header.split("\\t")){
                        if (!(retval.equals("\"\"")))
                        model.addRow(new Object[]{retval,"Cov.1","Batch1"});
                    }
                    CCovInputFileText.setText(String.valueOf(f));
                }
            }
            catch (IOException e) {
                JOptionPane.showMessageDialog(this, "Error opening file","Error",JOptionPane.ERROR_MESSAGE);
            }
            catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(this, "Error reading file","Error",JOptionPane.ERROR_MESSAGE);
            }
        }
        MainFrame.getPreferences().put("open-dir",openDir.getCurrentDirectory().getAbsolutePath());

    }//GEN-LAST:event_CinbrowesActionPerformed

    private void CincancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CincancelActionPerformed
        CCovInputFileText.setText("");
        while( CCountHeaderTable.getRowCount()!=0){
            DefaultTableModel model = (DefaultTableModel) CCountHeaderTable.getModel();
            model.removeRow(0);
        }
    }//GEN-LAST:event_CincancelActionPerformed

    private void CoutbrowesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CoutbrowesActionPerformed
        JFileChooser openDir = new JFileChooser();
        if (!(COutputFolderText.getText().equals(""))){
            File file =new File(COutputFolderText.getText());
            if (file.isDirectory())
            openDir.setCurrentDirectory(file);
        }
        else
        {
            String curDir = MainFrame.getPreferences().get("open-dir", null);
            openDir.setCurrentDirectory(curDir!=null ? new File(curDir) : null);
        }
        openDir.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        if (openDir.showOpenDialog(this)==JFileChooser.APPROVE_OPTION){
            File f = openDir.getSelectedFile();
            COutputFolderText.setText(String.valueOf(f));
        }
        MainFrame.getPreferences().put("open-dir",openDir.getCurrentDirectory().getAbsolutePath());
    }//GEN-LAST:event_CoutbrowesActionPerformed

    private void CoutcancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CoutcancelActionPerformed
        COutputFolderText.setText("");
    }//GEN-LAST:event_CoutcancelActionPerformed

    private void FExecuteButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FExecuteButton1ActionPerformed

        if (CCovInputFileText.getText().isEmpty()){
            JOptionPane.showMessageDialog(this, "You have to specified the count file","Error: Input file",JOptionPane.ERROR_MESSAGE);
            return;
        }
        if (COutputFolderText.getText().isEmpty()){
            JOptionPane.showMessageDialog(this, "You have to specified an output folders","Error: Output folder",JOptionPane.ERROR_MESSAGE);
            return;
        }
        File f =new File(CCovInputFileText.getText());

        //execute code
        Runtime rt = Runtime.getRuntime();
        try{
            String[] cmd = {"/bin/bash","-c","  bash ./execmiRNACovar.sh "};
            cmd[2]+="experiment.folder=\\\""+ f.getAbsolutePath()+"\\\"";
            cmd[2]+=" covariates=c\\(\\\"";
            cmd[2]+=CCountHeaderTable.getModel().getValueAt(0,1).toString();
            for (int i = 1; i <  CCountHeaderTable.getRowCount(); i++){
                cmd[2]+="\\\",\\\""+CCountHeaderTable.getModel().getValueAt(i,1).toString();
            }
            cmd[2]+= "\\\"\\)";
            cmd[2]+=" batch=c\\(\\\"";
            cmd[2]+=CCountHeaderTable.getModel().getValueAt(0,2).toString();
            for (int i = 1; i <  CCountHeaderTable.getRowCount(); i++){
                cmd[2]+="\\\",\\\""+CCountHeaderTable.getModel().getValueAt(i,2).toString();
            }
            cmd[2]+= "\\\"\\)";
            cmd[2]+="  output.folder=\\\""+COutputFolderText.getText() + "\\\" " + COutputFolderText.getText() +">& "+COutputFolderText.getText()+"/outputExecution ";
            //ProcessStatus.setText(pr.toString());
            if (MainFrame.listProcRunning.size()<MainFrame.GS.getMaxSizelistProcRunning()){
                Process pr = rt.exec(cmd);
                System.out.println("Running PID:"+ MainFrame.getPidOfProcess(pr)+"\n");
                //System.out.println(cmd[2]+"\n");
                MainFrame.ElProcRunning tmp= new MainFrame.ElProcRunning("Adding covariates and batch information ", COutputFolderText.getText(),pr,MainFrame.listModel.getSize());
                MainFrame.listProcRunning.add(tmp);
                java.net.URL imgURL = getClass().getResource("/pkg4seqgui/images/running.png");
                ImageIcon image2 = new ImageIcon(imgURL);
                MainFrame.GL.setAvoidProcListValueChanged(-1);
                MainFrame.listModel.addElement(new MainFrame.ListEntry(" [Running]   "+tmp.toString(),"Running",tmp.path, image2 ));
                MainFrame.GL.setAvoidProcListValueChanged(0);
                if(MainFrame.listProcRunning.size()==1){
                    MainFrame.t=new Timer();
                    MainFrame.t.scheduleAtFixedRate(new MainFrame.MyTask(), 5000, 5000);
                }
            }
            else{
                MainFrame.ElProcWaiting tmp= new MainFrame.ElProcWaiting("Adding covariates and batch information",COutputFolderText.getText(),cmd,MainFrame.listModel.getSize());
                MainFrame.listProcWaiting.add(tmp);
                java.net.URL imgURL = getClass().getResource("/pkg4seqgui/images/waiting.png");
                ImageIcon image2 = new ImageIcon(imgURL);
                MainFrame.GL.setAvoidProcListValueChanged(-1);
                MainFrame.listModel.addElement(new MainFrame.ListEntry(" [Waiting]   "+tmp.toString(),"Waiting",tmp.path,image2));
                MainFrame.GL.setAvoidProcListValueChanged(0);
            }
            MainFrame.GL.setAvoidProcListValueChanged(-1);
            MainFrame.ProcList.setModel(MainFrame.listModel);
            MainFrame.ProcList.setCellRenderer(new MainFrame.ListEntryCellRenderer());
            MainFrame.GL.setAvoidProcListValueChanged(0);
        }
        catch(IOException e) {
            JOptionPane.showMessageDialog(this, e.toString(),"Error execution",JOptionPane.ERROR_MESSAGE);
            System.out.println(e.toString());
        }

        JOptionPane.showMessageDialog(this, "Adding covariates and batch information task was scheduled","Confermation",JOptionPane.INFORMATION_MESSAGE);

    }//GEN-LAST:event_FExecuteButton1ActionPerformed

    private void FSaveButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FSaveButton1ActionPerformed
       // saveAsMenuItemActionPerformed(evt);
    }//GEN-LAST:event_FSaveButton1ActionPerformed

    private void CResetButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CResetButton1ActionPerformed
        CCovInputFileText.setText("");
        COutputFolderText.setText("");
        while( CCountHeaderTable.getRowCount()!=0){
            DefaultTableModel model = (DefaultTableModel) CCountHeaderTable.getModel();
            model.removeRow(0);
        }
    }//GEN-LAST:event_CResetButton1ActionPerformed

    private void CCloseButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CCloseButton1ActionPerformed
        CCovInputFileText.setText("");
        COutputFolderText.setText("");
        while( CCountHeaderTable.getRowCount()!=0){
            DefaultTableModel model = (DefaultTableModel)  CCountHeaderTable.getModel();
            model.removeRow(0);
        }
        //RESET FIELDS
        CardLayout card = (CardLayout)MainFrame.MainPanel.getLayout();
        card.show(MainFrame.MainPanel, "Empty");
        MainFrame.CurrentLayout="Empty";
        // AnalysisTree.clearSelection();
    }//GEN-LAST:event_CCloseButton1ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton CCloseButton1;
    public static javax.swing.JTable CCountHeaderTable;
    private javax.swing.JTextField CCovInputFileText;
    private javax.swing.JTextField COutputFolderText;
    private javax.swing.JButton CResetButton1;
    private javax.swing.JButton Cinbrowes;
    private javax.swing.JButton Cincancel;
    private javax.swing.JButton Coutbrowes;
    private javax.swing.JButton Coutcancel;
    private javax.swing.JButton FExecuteButton1;
    private javax.swing.JButton FSaveButton1;
    private javax.swing.JLabel jLabel97;
    private javax.swing.JLabel jLabel98;
    private javax.swing.JPanel jPanel27;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JPanel mRNABatchPanel;
    // End of variables declaration//GEN-END:variables
}
