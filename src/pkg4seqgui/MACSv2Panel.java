/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package pkg4seqgui;

import java.nio.file.Paths;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;

/**
 *
 * @author Nicola Licheri
 */
public class MACSv2Panel extends javax.swing.JPanel {

    /**
     * Creates new form MACSv2Panel
     */
    public MACSv2Panel() {
        initComponents();
        
        enableFields();
        
    }
    private static final long serialVersionUID = 57744123322L;

    private void enableFields() {
        boolean status = histoneMarksCheckbox.isSelected(); 
        broadCutoffTextField.setEnabled(status);
        qvalueTextField.setEnabled(!status);
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        executionGroup = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        executionPanel = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        sudoButton = new javax.swing.JRadioButton();
        dockerButton = new javax.swing.JRadioButton();
        jLabel3 = new javax.swing.JLabel();
        parametersPanel = new javax.swing.JPanel();
        controlLabel = new javax.swing.JLabel();
        controlBamTextField = new javax.swing.JTextField();
        browseControl = new javax.swing.JButton();
        cancelControl = new javax.swing.JButton();
        chipseqLabel = new javax.swing.JLabel();
        chipseqBamTextField = new javax.swing.JTextField();
        browseChipseq = new javax.swing.JButton();
        cancelChipseq = new javax.swing.JButton();
        experimentNameLabel = new javax.swing.JLabel();
        experimentNameTextField = new javax.swing.JTextField();
        histoneMarksLabel = new javax.swing.JLabel();
        histoneMarksCheckbox = new javax.swing.JCheckBox();
        broadCutoffLabel = new javax.swing.JLabel();
        broadCutoffTextField = new javax.swing.JTextField();
        qvalueLabel = new javax.swing.JLabel();
        qvalueTextField = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        organismComboBox = new javax.swing.JComboBox<>();
        executeButton = new javax.swing.JButton();
        resetButton = new javax.swing.JButton();
        closeButton = new javax.swing.JButton();

        setLayout(new java.awt.GridBagLayout());

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEmptyBorder(30, 1, 1, 1), "MACS2 ", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 1, 14), new java.awt.Color(197, 67, 67))); // NOI18N
        jPanel1.setLayout(new java.awt.GridBagLayout());

        executionPanel.setBackground(new java.awt.Color(248, 248, 248));
        executionPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        executionPanel.setLayout(new java.awt.GridBagLayout());

        jLabel1.setText("Execution:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.BASELINE_LEADING;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 12);
        executionPanel.add(jLabel1, gridBagConstraints);

        executionGroup.add(sudoButton);
        sudoButton.setText("sudo");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.BASELINE_LEADING;
        gridBagConstraints.insets = new java.awt.Insets(10, 63, 10, 10);
        executionPanel.add(sudoButton, gridBagConstraints);

        executionGroup.add(dockerButton);
        dockerButton.setSelected(true);
        dockerButton.setText("docker");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.BASELINE_LEADING;
        gridBagConstraints.weightx = 0.3;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        executionPanel.add(dockerButton, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.weightx = 100.0;
        executionPanel.add(jLabel3, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        jPanel1.add(executionPanel, gridBagConstraints);

        parametersPanel.setBackground(new java.awt.Color(248, 248, 248));
        parametersPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        parametersPanel.setLayout(new java.awt.GridBagLayout());

        controlLabel.setText("Control BAM: ");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        parametersPanel.add(controlLabel, gridBagConstraints);

        controlBamTextField.setEditable(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        parametersPanel.add(controlBamTextField, gridBagConstraints);

        browseControl.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pkg4seqgui/images/fileb.png"))); // NOI18N
        browseControl.setText("Browse");
        browseControl.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                browseControlActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        parametersPanel.add(browseControl, gridBagConstraints);

        cancelControl.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pkg4seqgui/images/33b.png"))); // NOI18N
        cancelControl.setText("Cancel");
        cancelControl.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelControlActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        parametersPanel.add(cancelControl, gridBagConstraints);

        chipseqLabel.setText("Chipseq BAM: ");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        parametersPanel.add(chipseqLabel, gridBagConstraints);

        chipseqBamTextField.setEditable(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        parametersPanel.add(chipseqBamTextField, gridBagConstraints);

        browseChipseq.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pkg4seqgui/images/fileb.png"))); // NOI18N
        browseChipseq.setText("Browse");
        browseChipseq.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                browseChipseqActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        parametersPanel.add(browseChipseq, gridBagConstraints);

        cancelChipseq.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pkg4seqgui/images/33b.png"))); // NOI18N
        cancelChipseq.setText("Cancel");
        cancelChipseq.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelChipseqActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        parametersPanel.add(cancelChipseq, gridBagConstraints);

        experimentNameLabel.setText("Experiment Name: ");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        parametersPanel.add(experimentNameLabel, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        parametersPanel.add(experimentNameTextField, gridBagConstraints);

        histoneMarksLabel.setText("histone.marks: ");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        parametersPanel.add(histoneMarksLabel, gridBagConstraints);

        histoneMarksCheckbox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                histoneMarksCheckboxActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        parametersPanel.add(histoneMarksCheckbox, gridBagConstraints);

        broadCutoffLabel.setText("broad.cutoff: ");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        parametersPanel.add(broadCutoffLabel, gridBagConstraints);

        broadCutoffTextField.setText("0.1");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        parametersPanel.add(broadCutoffTextField, gridBagConstraints);

        qvalueLabel.setText("qvalue: ");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        parametersPanel.add(qvalueLabel, gridBagConstraints);

        qvalueTextField.setText("0.05");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        parametersPanel.add(qvalueTextField, gridBagConstraints);

        jLabel2.setText("Organism: ");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        parametersPanel.add(jLabel2, gridBagConstraints);

        organismComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "hs", "mm" }));
        organismComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                organismComboBoxActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        parametersPanel.add(organismComboBox, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        jPanel1.add(parametersPanel, gridBagConstraints);

        executeButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pkg4seqgui/images/exec.png"))); // NOI18N
        executeButton.setText("Execute");
        executeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                executeButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_END;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        jPanel1.add(executeButton, gridBagConstraints);

        resetButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pkg4seqgui/images/reset.png"))); // NOI18N
        resetButton.setText("Reset");
        resetButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_END;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        jPanel1.add(resetButton, gridBagConstraints);

        closeButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pkg4seqgui/images/close.png"))); // NOI18N
        closeButton.setText("Close");
        closeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_END;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        jPanel1.add(closeButton, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        add(jPanel1, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

    private void organismComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_organismComboBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_organismComboBoxActionPerformed

    private void closeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeButtonActionPerformed
        resetButtonActionPerformed(evt); 
        MainFrame.setCard(null);
    }//GEN-LAST:event_closeButtonActionPerformed

    private void resetButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetButtonActionPerformed
        controlBamTextField.setText("");
        chipseqLabel.setText("");
        experimentNameTextField.setText("");
        histoneMarksCheckbox.setSelected(false);
        broadCutoffLabel.setText("0.1");
        qvalueTextField.setText("0.05");
        organismComboBox.setSelectedIndex(0);
        dockerButton.setSelected(true);
        enableFields();
    }//GEN-LAST:event_resetButtonActionPerformed

    private void executeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_executeButtonActionPerformed
        String controlBam = controlBamTextField.getText(), 
               chipseqBam = chipseqBamTextField.getText(), 
               experimentName = experimentNameTextField.getText(); 
        Float broadCutoff = 0f, qvalue = 0f; 
        
        if (MainFrame.checkPath(this, controlBam, "control BAM file") ||
            MainFrame.checkPath(this, chipseqBam, "chipseq BAM file") ||
            MainFrame.checkPath(this, experimentName, "experiment name string"))
            return; 
        
        if (!Paths.get(controlBam).getParent().equals(Paths.get(chipseqBam).getParent())) {
            JOptionPane.showMessageDialog(this, 
                "control.bam and chipseq.bam must be in the same directory.",
                "Error: BAM directory", 
                JOptionPane.ERROR_MESSAGE);
            return; 
        }
            
        if (histoneMarksCheckbox.isSelected()) {
            broadCutoff = MainFrame.checkFloatValue(this, broadCutoffTextField.getText(), "broad cutoff value"); 
            if (broadCutoff == null)
                return; 
        } else {
            qvalue = MainFrame.checkFloatValue(this, qvalueTextField.getText(), "qvalue threshold"); 
            if (qvalue == null) 
                return; 
        }
        
        String outputFolder = Paths.get(controlBam).getParent().toString();
        ScriptCaller params = new ScriptCaller("macs2.R", outputFolder)
                .addArg("group", sudoButton.isSelected() ? "sudo" : "docker")
                .addArg("control.bam", controlBam)
                .addArg("chipseq.bam", chipseqBam)
                .addArg("experiment.name", experimentName)
                .addArg("histone.marks", histoneMarksCheckbox.isSelected())
                .addArg("broad.cutoff", broadCutoff)
                .addArg("qvalue", qvalue)
                .addArg("organism", organismComboBox.getSelectedItem().toString());
        MainFrame.execCommand(this, "MACS2", params);
    }//GEN-LAST:event_executeButtonActionPerformed

    private void browseControlActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_browseControlActionPerformed
        MainFrame.browseTextFieldContent(this, controlBamTextField, JFileChooser.FILES_ONLY);
    }//GEN-LAST:event_browseControlActionPerformed

    private void browseChipseqActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_browseChipseqActionPerformed
        MainFrame.browseTextFieldContent(this, chipseqBamTextField, JFileChooser.FILES_ONLY);
    }//GEN-LAST:event_browseChipseqActionPerformed

    private void cancelControlActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelControlActionPerformed
        controlBamTextField.setText("");
    }//GEN-LAST:event_cancelControlActionPerformed

    private void cancelChipseqActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelChipseqActionPerformed
        chipseqBamTextField.setText("");
    }//GEN-LAST:event_cancelChipseqActionPerformed

    private void histoneMarksCheckboxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_histoneMarksCheckboxActionPerformed
        enableFields();
    }//GEN-LAST:event_histoneMarksCheckboxActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel broadCutoffLabel;
    private javax.swing.JTextField broadCutoffTextField;
    private javax.swing.JButton browseChipseq;
    private javax.swing.JButton browseControl;
    private javax.swing.JButton cancelChipseq;
    private javax.swing.JButton cancelControl;
    private javax.swing.JTextField chipseqBamTextField;
    private javax.swing.JLabel chipseqLabel;
    private javax.swing.JButton closeButton;
    private javax.swing.JTextField controlBamTextField;
    private javax.swing.JLabel controlLabel;
    private javax.swing.JRadioButton dockerButton;
    private javax.swing.JButton executeButton;
    private javax.swing.ButtonGroup executionGroup;
    private javax.swing.JPanel executionPanel;
    private javax.swing.JLabel experimentNameLabel;
    private javax.swing.JTextField experimentNameTextField;
    private javax.swing.JCheckBox histoneMarksCheckbox;
    private javax.swing.JLabel histoneMarksLabel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JComboBox<String> organismComboBox;
    private javax.swing.JPanel parametersPanel;
    private javax.swing.JLabel qvalueLabel;
    private javax.swing.JTextField qvalueTextField;
    private javax.swing.JButton resetButton;
    private javax.swing.JRadioButton sudoButton;
    // End of variables declaration//GEN-END:variables
}
