/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package pkg4seqgui;

import java.awt.CardLayout;
import java.io.File;
import java.io.IOException;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.Timer;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;

/**
 *
 * @author Nicola Licheri
 */
public class CircRNAWrapperCiriPanel extends javax.swing.JPanel {

    /**
     * Creates new form wrapperCiri
     */
    public CircRNAWrapperCiriPanel() {
        initComponents();
    }
    private static final long serialVersionUID = 9778212331L;
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        strigencyValue = new javax.swing.ButtonGroup();
        executionGroup = new javax.swing.ButtonGroup();
        sequencingModeGroup = new javax.swing.ButtonGroup();
        wrapperCiriPanel = new javax.swing.JPanel();
        BWAExecution = new javax.swing.JPanel();
        genomePathTextField = new javax.swing.JTextField();
        GenomeFolder = new javax.swing.JLabel();
        browseGenomePathButton = new javax.swing.JButton();
        cancelGenomePathButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        fastqPathTextField = new javax.swing.JTextField();
        browseFastqFolderButton = new javax.swing.JButton();
        cancelFastqFolderButton = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        scratchFolderTextField = new javax.swing.JTextField();
        browseScratchFolderButton = new javax.swing.JButton();
        cancelScratchFolderButton = new javax.swing.JButton();
        jLabel8 = new javax.swing.JLabel();
        singleEndSeqRadioButton = new javax.swing.JRadioButton();
        pairedEndSeqRadioButton = new javax.swing.JRadioButton();
        jLabel9 = new javax.swing.JLabel();
        sampleIdTextField = new javax.swing.JTextField();
        CIRIParameters = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        maxSpanningTextField = new javax.swing.JTextField();
        browseAnnotationButton = new javax.swing.JButton();
        cancelAnnotationButton = new javax.swing.JButton();
        annotationFilepathTextField = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        highStrigencyRadioButton = new javax.swing.JRadioButton();
        lowStrigencyRadioButton = new javax.swing.JRadioButton();
        zeroStrigencyRadioButton = new javax.swing.JRadioButton();
        jLabel5 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        qualityThresholdTextField = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        executeWrapperCiriButton = new javax.swing.JButton();
        resetFormWrapperCiriButton = new javax.swing.JButton();
        closeFormWrapperCiriButton = new javax.swing.JButton();
        ExecutionPanel = new javax.swing.JPanel();
        jLabel142 = new javax.swing.JLabel();
        SudoRadioButton = new javax.swing.JRadioButton();
        DockerRadioButton = new javax.swing.JRadioButton();
        jLabel6 = new javax.swing.JLabel();
        nThreadsTextField = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();

        setLayout(new java.awt.GridBagLayout());

        wrapperCiriPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEmptyBorder(30, 1, 1, 1), "BWA Alignment & circRNA Prediction", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 1, 14), new java.awt.Color(0, 204, 153))); // NOI18N
        wrapperCiriPanel.setToolTipText(null);
        wrapperCiriPanel.setMinimumSize(new java.awt.Dimension(417, 291));
        wrapperCiriPanel.setLayout(new java.awt.GridBagLayout());

        BWAExecution.setBackground(new java.awt.Color(248, 248, 248));
        BWAExecution.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        BWAExecution.setToolTipText(null);
        BWAExecution.setLayout(new java.awt.GridBagLayout());

        genomePathTextField.setEditable(false);
        genomePathTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                genomePathTextFieldActionPerformed(evt);
            }
        });
        genomePathTextField.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                genomePathTextFieldPropertyChange(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        BWAExecution.add(genomePathTextField, gridBagConstraints);

        GenomeFolder.setText("Genome file:");
        GenomeFolder.setToolTipText(null);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 90);
        BWAExecution.add(GenomeFolder, gridBagConstraints);
        GenomeFolder.getAccessibleContext().setAccessibleName("genomeFolderLabel");

        browseGenomePathButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pkg4seqgui/images/fileb.png"))); // NOI18N
        browseGenomePathButton.setText("Browse");
        browseGenomePathButton.setToolTipText(null);
        browseGenomePathButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                browseGenomePathButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.ABOVE_BASELINE_TRAILING;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        BWAExecution.add(browseGenomePathButton, gridBagConstraints);

        cancelGenomePathButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pkg4seqgui/images/33b.png"))); // NOI18N
        cancelGenomePathButton.setText("Cancel");
        cancelGenomePathButton.setToolTipText(null);
        cancelGenomePathButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelGenomePathButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 6;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.ABOVE_BASELINE_TRAILING;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        BWAExecution.add(cancelGenomePathButton, gridBagConstraints);

        jLabel1.setText("Fastq folder: ");
        jLabel1.setToolTipText(null);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        BWAExecution.add(jLabel1, gridBagConstraints);

        fastqPathTextField.setEditable(false);
        fastqPathTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fastqPathTextFieldActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        BWAExecution.add(fastqPathTextField, gridBagConstraints);

        browseFastqFolderButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pkg4seqgui/images/52b.png"))); // NOI18N
        browseFastqFolderButton.setText("Browse");
        browseFastqFolderButton.setToolTipText(null);
        browseFastqFolderButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                browseFastqFolderButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.ABOVE_BASELINE_TRAILING;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        BWAExecution.add(browseFastqFolderButton, gridBagConstraints);

        cancelFastqFolderButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pkg4seqgui/images/33b.png"))); // NOI18N
        cancelFastqFolderButton.setText("Cancel");
        cancelFastqFolderButton.setToolTipText(null);
        cancelFastqFolderButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelFastqFolderButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 6;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.ABOVE_BASELINE_TRAILING;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        BWAExecution.add(cancelFastqFolderButton, gridBagConstraints);

        jLabel2.setText("Scratch folder:");
        jLabel2.setToolTipText(null);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        BWAExecution.add(jLabel2, gridBagConstraints);

        scratchFolderTextField.setEditable(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        BWAExecution.add(scratchFolderTextField, gridBagConstraints);

        browseScratchFolderButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pkg4seqgui/images/52b.png"))); // NOI18N
        browseScratchFolderButton.setText("Browse");
        browseScratchFolderButton.setToolTipText(null);
        browseScratchFolderButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                browseScratchFolderButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.ABOVE_BASELINE_TRAILING;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        BWAExecution.add(browseScratchFolderButton, gridBagConstraints);

        cancelScratchFolderButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pkg4seqgui/images/33b.png"))); // NOI18N
        cancelScratchFolderButton.setText("Cancel");
        cancelScratchFolderButton.setToolTipText(null);
        cancelScratchFolderButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelScratchFolderButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 6;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.ABOVE_BASELINE_TRAILING;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        BWAExecution.add(cancelScratchFolderButton, gridBagConstraints);

        jLabel8.setText("Sequencing:");
        jLabel8.setToolTipText(null);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.BASELINE_LEADING;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        BWAExecution.add(jLabel8, gridBagConstraints);

        singleEndSeqRadioButton.setBackground(new java.awt.Color(248, 248, 248));
        sequencingModeGroup.add(singleEndSeqRadioButton);
        singleEndSeqRadioButton.setText("single-end");
        singleEndSeqRadioButton.setToolTipText(null);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.BASELINE;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        BWAExecution.add(singleEndSeqRadioButton, gridBagConstraints);

        pairedEndSeqRadioButton.setBackground(new java.awt.Color(248, 248, 248));
        sequencingModeGroup.add(pairedEndSeqRadioButton);
        pairedEndSeqRadioButton.setSelected(true);
        pairedEndSeqRadioButton.setText("paired-end");
        pairedEndSeqRadioButton.setToolTipText(null);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.BASELINE_LEADING;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        BWAExecution.add(pairedEndSeqRadioButton, gridBagConstraints);

        jLabel9.setText("Sample ID:");
        jLabel9.setToolTipText(null);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.BASELINE_LEADING;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        BWAExecution.add(jLabel9, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.BASELINE;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        BWAExecution.add(sampleIdTextField, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.weightx = 10.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        wrapperCiriPanel.add(BWAExecution, gridBagConstraints);

        CIRIParameters.setBackground(new java.awt.Color(248, 248, 248));
        CIRIParameters.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        CIRIParameters.setToolTipText(null);
        CIRIParameters.setMinimumSize(new java.awt.Dimension(417, 291));
        CIRIParameters.setLayout(new java.awt.GridBagLayout());

        jLabel3.setText("Annotation file (.gtf):");
        jLabel3.setToolTipText(null);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        CIRIParameters.add(jLabel3, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        CIRIParameters.add(maxSpanningTextField, gridBagConstraints);

        browseAnnotationButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pkg4seqgui/images/fileb.png"))); // NOI18N
        browseAnnotationButton.setText("Browse");
        browseAnnotationButton.setToolTipText(null);
        browseAnnotationButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                browseAnnotationButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        CIRIParameters.add(browseAnnotationButton, gridBagConstraints);

        cancelAnnotationButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pkg4seqgui/images/33b.png"))); // NOI18N
        cancelAnnotationButton.setText("Cancel");
        cancelAnnotationButton.setToolTipText(null);
        cancelAnnotationButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelAnnotationButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 6;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        CIRIParameters.add(cancelAnnotationButton, gridBagConstraints);

        annotationFilepathTextField.setEditable(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 100.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        CIRIParameters.add(annotationFilepathTextField, gridBagConstraints);

        jLabel4.setText("Strigency:");
        jLabel4.setToolTipText(null);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        CIRIParameters.add(jLabel4, gridBagConstraints);

        highStrigencyRadioButton.setBackground(new java.awt.Color(248, 248, 248));
        strigencyValue.add(highStrigencyRadioButton);
        highStrigencyRadioButton.setSelected(true);
        highStrigencyRadioButton.setText("high");
        highStrigencyRadioButton.setToolTipText(null);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        CIRIParameters.add(highStrigencyRadioButton, gridBagConstraints);

        lowStrigencyRadioButton.setBackground(new java.awt.Color(248, 248, 248));
        strigencyValue.add(lowStrigencyRadioButton);
        lowStrigencyRadioButton.setText("low");
        lowStrigencyRadioButton.setToolTipText(null);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        CIRIParameters.add(lowStrigencyRadioButton, gridBagConstraints);

        zeroStrigencyRadioButton.setBackground(new java.awt.Color(248, 248, 248));
        strigencyValue.add(zeroStrigencyRadioButton);
        zeroStrigencyRadioButton.setText("zero");
        zeroStrigencyRadioButton.setToolTipText(null);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        CIRIParameters.add(zeroStrigencyRadioButton, gridBagConstraints);

        jLabel5.setText("Max Spanning Distance:");
        jLabel5.setToolTipText(null);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        CIRIParameters.add(jLabel5, gridBagConstraints);

        jLabel7.setText("Quality threshold:");
        jLabel7.setToolTipText(null);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        CIRIParameters.add(jLabel7, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        CIRIParameters.add(qualityThresholdTextField, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 100.0;
        CIRIParameters.add(jLabel10, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.weightx = 10.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        wrapperCiriPanel.add(CIRIParameters, gridBagConstraints);

        executeWrapperCiriButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pkg4seqgui/images/exec.png"))); // NOI18N
        executeWrapperCiriButton.setText("Execute");
        executeWrapperCiriButton.setToolTipText(null);
        executeWrapperCiriButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                executeWrapperCiriButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_END;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        wrapperCiriPanel.add(executeWrapperCiriButton, gridBagConstraints);

        resetFormWrapperCiriButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pkg4seqgui/images/reset.png"))); // NOI18N
        resetFormWrapperCiriButton.setText("Reset");
        resetFormWrapperCiriButton.setToolTipText(null);
        resetFormWrapperCiriButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetFormWrapperCiriButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_END;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        wrapperCiriPanel.add(resetFormWrapperCiriButton, gridBagConstraints);

        closeFormWrapperCiriButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pkg4seqgui/images/close.png"))); // NOI18N
        closeFormWrapperCiriButton.setText("Close");
        closeFormWrapperCiriButton.setToolTipText(null);
        closeFormWrapperCiriButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeFormWrapperCiriButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_END;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        wrapperCiriPanel.add(closeFormWrapperCiriButton, gridBagConstraints);

        ExecutionPanel.setBackground(new java.awt.Color(248, 248, 248));
        ExecutionPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        ExecutionPanel.setToolTipText(null);
        ExecutionPanel.setLayout(new java.awt.GridBagLayout());

        jLabel142.setText("Execution:");
        jLabel142.setToolTipText(null);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.BASELINE_LEADING;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 107);
        ExecutionPanel.add(jLabel142, gridBagConstraints);

        SudoRadioButton.setBackground(new java.awt.Color(248, 248, 248));
        executionGroup.add(SudoRadioButton);
        SudoRadioButton.setText("sudo");
        SudoRadioButton.setToolTipText(null);
        SudoRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SudoRadioButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.BASELINE_LEADING;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        ExecutionPanel.add(SudoRadioButton, gridBagConstraints);

        DockerRadioButton.setBackground(new java.awt.Color(248, 248, 248));
        executionGroup.add(DockerRadioButton);
        DockerRadioButton.setSelected(true);
        DockerRadioButton.setText("docker");
        DockerRadioButton.setToolTipText(null);
        DockerRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DockerRadioButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.BASELINE_LEADING;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        ExecutionPanel.add(DockerRadioButton, gridBagConstraints);

        jLabel6.setText("Threads:");
        jLabel6.setToolTipText(null);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.BASELINE;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        ExecutionPanel.add(jLabel6, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.BASELINE;
        gridBagConstraints.weightx = 0.4;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        ExecutionPanel.add(nThreadsTextField, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.weightx = 100.0;
        ExecutionPanel.add(jLabel11, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        wrapperCiriPanel.add(ExecutionPanel, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        add(wrapperCiriPanel, gridBagConstraints);
        wrapperCiriPanel.getAccessibleContext().setAccessibleName("BWA alignment & CIRI prediction");
    }// </editor-fold>//GEN-END:initComponents

    private void genomePathTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_genomePathTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_genomePathTextFieldActionPerformed

    private void browseGenomePathButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_browseGenomePathButtonActionPerformed
        JFileChooser openDir = new JFileChooser();
        
        if (!(genomePathTextField.getText().equals(""))){
            File file =new File(genomePathTextField.getText());
            if (file.isDirectory())
                openDir.setCurrentDirectory(file);
        }
        else {
            String curDir = MainFrame.getPreferences().get("open-dir", null);
            openDir.setCurrentDirectory(curDir!=null ? new File(curDir) : null);
        }
        
        openDir.setFileSelectionMode(JFileChooser.FILES_ONLY);
        
        if (openDir.showOpenDialog(this)==JFileChooser.APPROVE_OPTION) {
            File f = openDir.getSelectedFile();
            genomePathTextField.setText(String.valueOf(f));
        }
        MainFrame.getPreferences().put("open-dir",openDir.getCurrentDirectory().getAbsolutePath());
    }//GEN-LAST:event_browseGenomePathButtonActionPerformed

    private void cancelGenomePathButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelGenomePathButtonActionPerformed
        // TODO add your handling code here:
        genomePathTextField.setText("");
    }//GEN-LAST:event_cancelGenomePathButtonActionPerformed

    private void closeFormWrapperCiriButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeFormWrapperCiriButtonActionPerformed
        CardLayout card = (CardLayout)MainFrame.MainPanel.getLayout();
        card.show(MainFrame.MainPanel, "Empty");
        MainFrame.CurrentLayout="Empty";
        
        resetFormWrapperCiriButtonActionPerformed(evt);
    }//GEN-LAST:event_closeFormWrapperCiriButtonActionPerformed

    private void executeWrapperCiriButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_executeWrapperCiriButtonActionPerformed
        String execution = DockerRadioButton.isSelected() ? "docker" : "sudo";
        String sequencingMode = pairedEndSeqRadioButton.isSelected() ? "pe" : "se"; 
        String genomePath = genomePathTextField.getText(),
            fastqPath = fastqPathTextField.getText(),
            annotationPath = annotationFilepathTextField.getText(),
            scratchFolder = scratchFolderTextField.getText(); 
        String sampleId = sampleIdTextField.getText();
        String strigency; 
        int spanningDistance, qualityThreshold, nthreads; 
        
        if (genomePath.isEmpty()) {
            JOptionPane.showMessageDialog(this, 
                "You have to specify the reference genome file.",
                "Error: reference genome", 
                JOptionPane.ERROR_MESSAGE);
            return; 
        }
        else if (!genomePath.endsWith(".fasta") && !genomePath.endsWith(".fa")) {
            JOptionPane.showMessageDialog(this, 
                "The reference genome must be a FASTA file.",
                "Error: reference genome", 
                JOptionPane.ERROR_MESSAGE);
            return; 
        }
        
        if (fastqPath.isEmpty()) {
            JOptionPane.showMessageDialog(this, 
                "You have to specify the RNA-seq data to be aligned.",
                "Error: RNA-seq data", 
                JOptionPane.ERROR_MESSAGE);
            return;
        }
        else if (!fastqPath.endsWith(".fastq.gz")) {
            JOptionPane.showMessageDialog(this, 
                "The RNA-seq data must be a gzipped FASTQ file.",
                "Error: RNA-seq data", 
                JOptionPane.ERROR_MESSAGE);
            return; 
        }
        if (scratchFolder.isEmpty()) {
            JOptionPane.showMessageDialog(this, 
                "You have to specify the scratch folder.",
                "Error: scratch folder", 
                JOptionPane.ERROR_MESSAGE);
            return; 
        }
        
        //annotation file must be a GFF/GTF file 
        if (!annotationPath.equals("") && !annotationPath.endsWith(".gtf") && !annotationPath.endsWith(".gff")) {
            JOptionPane.showMessageDialog(this, 
                "The annotation file must be a GTF/GFF file.",
                "Error: annotation file", 
                JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        
        strigency = "high"; 
        
        if (lowStrigencyRadioButton.isSelected()) 
            strigency = "low"; 
        else if (zeroStrigencyRadioButton.isSelected()) 
            strigency = "zero"; 
        
        try {
            nthreads = Integer.parseInt(nThreadsTextField.getText()); 
            
            if (nthreads <= 0)
                throw new NumberFormatException();
        }
        catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, 
                "You have to specified a value greater than 0.",
                "Error: number of threads", 
                JOptionPane.ERROR_MESSAGE);
            return; 
        }
        
        
        try {       
            spanningDistance = Integer.parseInt(maxSpanningTextField.getText());
        }
        catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, 
                "You have to specified a value greater than 0.",
                "Error: spanning distance", 
                JOptionPane.ERROR_MESSAGE);
            return; 
        }
        
        try {
            qualityThreshold = Integer.parseInt(qualityThresholdTextField.getText()); 

            if (qualityThreshold < 0 || qualityThreshold > 40) 
                throw new NumberFormatException();
        }
        catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, 
                "You have to specified an integer value between 0 and 40.",
                "Error: quality threshold", 
                JOptionPane.ERROR_MESSAGE);
            return; 
        }
        
      
        String command = String.format(
            "group='%s' scratch.folder='%s' data.folder='%s' genome.file='%s' " + 
            "seq.type='%s' sample.id='%s' threads='%d' annotation.file='%s' " + 
            "max.span='%d' strigency.value='%s' quality.threshold='%d'", 
             execution, scratchFolder, fastqPath, genomePath, sequencingMode, 
             sampleId, nthreads, annotationPath, spanningDistance, strigency, qualityThreshold)
                .replace("'", "\\\"");
                
        Path p = Paths.get(fastqPath);
        Path folder = p.getParent();
        
        MainFrame.execCommand(this, "CircRNA CIRI2 prediction", "execWrapperCiri.sh", command, folder.toString());
    }//GEN-LAST:event_executeWrapperCiriButtonActionPerformed

    private void cancelFastqFolderButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelFastqFolderButtonActionPerformed
        fastqPathTextField.setText("");
    }//GEN-LAST:event_cancelFastqFolderButtonActionPerformed

    private void browseScratchFolderButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_browseScratchFolderButtonActionPerformed
        // TODO add your handling code here:
        JFileChooser openDir = new JFileChooser();
        
        if (!(scratchFolderTextField.getText().equals(""))){
            File file =new File(scratchFolderTextField.getText());
            if (file.isDirectory())
                openDir.setCurrentDirectory(file);
        }
        else {
            String curDir = MainFrame.getPreferences().get("open-dir", null);
            openDir.setCurrentDirectory(curDir!=null ? new File(curDir) : null);
        }
        
        openDir.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        
        if (openDir.showOpenDialog(this)==JFileChooser.APPROVE_OPTION) {
            File f = openDir.getSelectedFile();
            scratchFolderTextField.setText(String.valueOf(f));
        }
        MainFrame.getPreferences().put("open-dir",openDir.getCurrentDirectory().getAbsolutePath());
        
    }//GEN-LAST:event_browseScratchFolderButtonActionPerformed

    private void browseFastqFolderButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_browseFastqFolderButtonActionPerformed
        JFileChooser openDir = new JFileChooser();
        
        if (!(fastqPathTextField.getText().equals(""))){
            File file =new File(fastqPathTextField.getText());
            if (file.isDirectory())
                openDir.setCurrentDirectory(file);
        }
        else {
            String curDir = MainFrame.getPreferences().get("open-dir", null);
            openDir.setCurrentDirectory(curDir!=null ? new File(curDir) : null);
        }
        
        openDir.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        
        if (openDir.showOpenDialog(this)==JFileChooser.APPROVE_OPTION) {
            File f = openDir.getSelectedFile();
            fastqPathTextField.setText(String.valueOf(f));
        }
        MainFrame.getPreferences().put("open-dir",openDir.getCurrentDirectory().getAbsolutePath());
    }//GEN-LAST:event_browseFastqFolderButtonActionPerformed

    private void cancelScratchFolderButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelScratchFolderButtonActionPerformed
        // TODO add your handling code here:
        scratchFolderTextField.setText("");
    }//GEN-LAST:event_cancelScratchFolderButtonActionPerformed

    private void cancelAnnotationButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelAnnotationButtonActionPerformed
        annotationFilepathTextField.setText("");
    }//GEN-LAST:event_cancelAnnotationButtonActionPerformed

    private void browseAnnotationButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_browseAnnotationButtonActionPerformed
        JFileChooser openDir = new JFileChooser();
        
        if (!(annotationFilepathTextField.getText().equals(""))){
            File file =new File(annotationFilepathTextField.getText());
            if (file.isDirectory())
                openDir.setCurrentDirectory(file);
        }
        else {
            String curDir = MainFrame.getPreferences().get("open-dir", null);
            openDir.setCurrentDirectory(curDir!=null ? new File(curDir) : null);
        }
        
        openDir.setFileSelectionMode(JFileChooser.FILES_ONLY);
        
        if (openDir.showOpenDialog(this)==JFileChooser.APPROVE_OPTION) {
            File f = openDir.getSelectedFile();
            annotationFilepathTextField.setText(String.valueOf(f));
        }
        MainFrame.getPreferences().put("open-dir",openDir.getCurrentDirectory().getAbsolutePath());
    }//GEN-LAST:event_browseAnnotationButtonActionPerformed

    private void resetFormWrapperCiriButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetFormWrapperCiriButtonActionPerformed
        genomePathTextField.setText("");
        scratchFolderTextField.setText("");
        fastqPathTextField.setText("");
        annotationFilepathTextField.setText("");
        maxSpanningTextField.setText("");
        qualityThresholdTextField.setText("");
        highStrigencyRadioButton.setSelected(true);
    }//GEN-LAST:event_resetFormWrapperCiriButtonActionPerformed

    private void genomePathTextFieldPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_genomePathTextFieldPropertyChange
        // TODO add your handling code here:
    }//GEN-LAST:event_genomePathTextFieldPropertyChange

    private void fastqPathTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fastqPathTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_fastqPathTextFieldActionPerformed

    private void SudoRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SudoRadioButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_SudoRadioButtonActionPerformed

    private void DockerRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DockerRadioButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_DockerRadioButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel BWAExecution;
    private javax.swing.JPanel CIRIParameters;
    private javax.swing.JRadioButton DockerRadioButton;
    private javax.swing.JPanel ExecutionPanel;
    private javax.swing.JLabel GenomeFolder;
    private javax.swing.JRadioButton SudoRadioButton;
    private javax.swing.JTextField annotationFilepathTextField;
    private javax.swing.JButton browseAnnotationButton;
    private javax.swing.JButton browseFastqFolderButton;
    private javax.swing.JButton browseGenomePathButton;
    private javax.swing.JButton browseScratchFolderButton;
    private javax.swing.JButton cancelAnnotationButton;
    private javax.swing.JButton cancelFastqFolderButton;
    private javax.swing.JButton cancelGenomePathButton;
    private javax.swing.JButton cancelScratchFolderButton;
    private javax.swing.JButton closeFormWrapperCiriButton;
    private javax.swing.JButton executeWrapperCiriButton;
    private javax.swing.ButtonGroup executionGroup;
    private javax.swing.JTextField fastqPathTextField;
    private javax.swing.JTextField genomePathTextField;
    private javax.swing.JRadioButton highStrigencyRadioButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel142;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JRadioButton lowStrigencyRadioButton;
    private javax.swing.JTextField maxSpanningTextField;
    private javax.swing.JTextField nThreadsTextField;
    private javax.swing.JRadioButton pairedEndSeqRadioButton;
    private javax.swing.JTextField qualityThresholdTextField;
    private javax.swing.JButton resetFormWrapperCiriButton;
    private javax.swing.JTextField sampleIdTextField;
    private javax.swing.JTextField scratchFolderTextField;
    private javax.swing.ButtonGroup sequencingModeGroup;
    private javax.swing.JRadioButton singleEndSeqRadioButton;
    private javax.swing.ButtonGroup strigencyValue;
    private javax.swing.JPanel wrapperCiriPanel;
    private javax.swing.JRadioButton zeroStrigencyRadioButton;
    // End of variables declaration//GEN-END:variables
}
