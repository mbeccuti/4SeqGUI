/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package pkg4seqgui;

import java.io.File;
import java.util.ArrayList;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Nicola Licheri
 */
public class CircRNAMergeSamples extends javax.swing.JPanel {
    private static final long serialVersionUID = 9778212336L;
    private String lastSelectedTool;
    
    private class TableEntry {
        public final String sample; 
//        public final String path; 
        public final int group; 
        public final int replicate; 
        
        public TableEntry(String sample, int group, int rep) {
            this.sample = sample;
            this.group = group; 
            this.replicate = rep; 
        }
    }
    
    /**
     * Creates new form CircRNAMergeSamples
     */
    public CircRNAMergeSamples() {
        initComponents();
     //   Dimension d=new Dimension(40,60);
   //     samplesGroupsTable.setPreferredSize(d);
                //setPreferredSize( 40, 60 );
        //.setSize(d);
        lastSelectedTool = (String) usedToolComboBox.getSelectedItem();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        executionGroup = new javax.swing.ButtonGroup();
        CircRNAMergePanel = new javax.swing.JPanel();
        ExecutionPanel = new javax.swing.JPanel();
        jLabel149 = new javax.swing.JLabel();
        SudoRadioButton = new javax.swing.JRadioButton();
        DockerRadioButton = new javax.swing.JRadioButton();
        SamplesPanel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        samplesGroupsTable = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        browseSamplesFolderButton = new javax.swing.JButton();
        cancelSamplesFolderButton = new javax.swing.JButton();
        samplesFolderTextField = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        browseOutputFolder = new javax.swing.JButton();
        cancelOutputFolder = new javax.swing.JButton();
        outputFolderTextField = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        scratchFolderTextField = new javax.swing.JTextField();
        cancelScratch = new javax.swing.JButton();
        browseScratch = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        usedToolComboBox = new javax.swing.JComboBox<>();
        resetFormPostProcessingButton = new javax.swing.JButton();
        executeFormPostProcessingButton = new javax.swing.JButton();
        closeFormPostProcessingButton = new javax.swing.JButton();
        FilterCircRNAsPanel = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        minReadsTextField = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        minReplicatesTextField = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        minAverageTextField = new javax.swing.JTextField();

        setLayout(new java.awt.GridBagLayout());

        CircRNAMergePanel.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEmptyBorder(30, 1, 1, 1), "Merge circRNA prediction files", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 1, 14), new java.awt.Color(58, 140, 44))); // NOI18N
        CircRNAMergePanel.setLayout(new java.awt.GridBagLayout());

        ExecutionPanel.setBackground(new java.awt.Color(248, 248, 248));
        ExecutionPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        ExecutionPanel.setToolTipText(null);
        ExecutionPanel.setLayout(new java.awt.GridBagLayout());

        jLabel149.setText("Execution:");
        jLabel149.setToolTipText(null);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.BASELINE_LEADING;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        ExecutionPanel.add(jLabel149, gridBagConstraints);

        SudoRadioButton.setBackground(new java.awt.Color(248, 248, 248));
        executionGroup.add(SudoRadioButton);
        SudoRadioButton.setText("sudo");
        SudoRadioButton.setToolTipText(null);
        SudoRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SudoRadioButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.BASELINE_LEADING;
        gridBagConstraints.insets = new java.awt.Insets(10, 45, 10, 10);
        ExecutionPanel.add(SudoRadioButton, gridBagConstraints);

        DockerRadioButton.setBackground(new java.awt.Color(248, 248, 248));
        executionGroup.add(DockerRadioButton);
        DockerRadioButton.setSelected(true);
        DockerRadioButton.setText("docker");
        DockerRadioButton.setToolTipText(null);
        DockerRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DockerRadioButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.BASELINE_LEADING;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        ExecutionPanel.add(DockerRadioButton, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        CircRNAMergePanel.add(ExecutionPanel, gridBagConstraints);

        SamplesPanel.setBackground(new java.awt.Color(248, 248, 248));
        SamplesPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        SamplesPanel.setLayout(new java.awt.GridBagLayout());

        jScrollPane1.setPreferredSize(new java.awt.Dimension(253, 403));

        samplesGroupsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Path", "Sample", "Group", "Replicate"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, true, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        samplesGroupsTable.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        samplesGroupsTable.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(samplesGroupsTable);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        SamplesPanel.add(jScrollPane1, gridBagConstraints);

        jLabel1.setText("Samples folder:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.BASELINE_LEADING;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        SamplesPanel.add(jLabel1, gridBagConstraints);

        browseSamplesFolderButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pkg4seqgui/images/52b.png"))); // NOI18N
        browseSamplesFolderButton.setText("Browse");
        browseSamplesFolderButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                browseSamplesFolderButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.BASELINE_TRAILING;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        SamplesPanel.add(browseSamplesFolderButton, gridBagConstraints);

        cancelSamplesFolderButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pkg4seqgui/images/33b.png"))); // NOI18N
        cancelSamplesFolderButton.setText("Cancel");
        cancelSamplesFolderButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelSamplesFolderButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.BASELINE_TRAILING;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        SamplesPanel.add(cancelSamplesFolderButton, gridBagConstraints);

        samplesFolderTextField.setEditable(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.BASELINE;
        gridBagConstraints.weightx = 0.2;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        SamplesPanel.add(samplesFolderTextField, gridBagConstraints);

        jLabel2.setText("Output folder:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.BASELINE_LEADING;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        SamplesPanel.add(jLabel2, gridBagConstraints);

        browseOutputFolder.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pkg4seqgui/images/52b.png"))); // NOI18N
        browseOutputFolder.setText("Browse");
        browseOutputFolder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                browseOutputFolderActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.BASELINE_TRAILING;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        SamplesPanel.add(browseOutputFolder, gridBagConstraints);

        cancelOutputFolder.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pkg4seqgui/images/33b.png"))); // NOI18N
        cancelOutputFolder.setText("Cancel");
        cancelOutputFolder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelOutputFolderActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.BASELINE_TRAILING;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        SamplesPanel.add(cancelOutputFolder, gridBagConstraints);

        outputFolderTextField.setEditable(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.BASELINE;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        SamplesPanel.add(outputFolderTextField, gridBagConstraints);

        jLabel6.setText("Scratch folder:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.BASELINE_LEADING;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        SamplesPanel.add(jLabel6, gridBagConstraints);

        scratchFolderTextField.setEditable(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.BASELINE;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        SamplesPanel.add(scratchFolderTextField, gridBagConstraints);

        cancelScratch.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pkg4seqgui/images/33b.png"))); // NOI18N
        cancelScratch.setText("Cancel");
        cancelScratch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelScratchActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.BASELINE;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        SamplesPanel.add(cancelScratch, gridBagConstraints);

        browseScratch.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pkg4seqgui/images/52b.png"))); // NOI18N
        browseScratch.setText("Browse");
        browseScratch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                browseScratchActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.BASELINE;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        SamplesPanel.add(browseScratch, gridBagConstraints);

        jLabel7.setText("Prediction tool:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        SamplesPanel.add(jLabel7, gridBagConstraints);

        usedToolComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "ACFS", "CIRI", "CIRI2", "CIRCEXPLORER", "CIRCEXPLORER2", "CIRCRNAFINDER", "DCC", "FINDCIRC2", "KNIFE" }));
        usedToolComboBox.setSelectedIndex(2);
        usedToolComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                usedToolComboBoxActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        SamplesPanel.add(usedToolComboBox, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        CircRNAMergePanel.add(SamplesPanel, gridBagConstraints);

        resetFormPostProcessingButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pkg4seqgui/images/reset.png"))); // NOI18N
        resetFormPostProcessingButton.setText("Reset");
        resetFormPostProcessingButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetFormPostProcessingButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_END;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        CircRNAMergePanel.add(resetFormPostProcessingButton, gridBagConstraints);

        executeFormPostProcessingButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pkg4seqgui/images/exec.png"))); // NOI18N
        executeFormPostProcessingButton.setText("Execute");
        executeFormPostProcessingButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                executeFormPostProcessingButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_END;
        gridBagConstraints.weightx = 3.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        CircRNAMergePanel.add(executeFormPostProcessingButton, gridBagConstraints);

        closeFormPostProcessingButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pkg4seqgui/images/close.png"))); // NOI18N
        closeFormPostProcessingButton.setText("Close");
        closeFormPostProcessingButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeFormPostProcessingButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_END;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        CircRNAMergePanel.add(closeFormPostProcessingButton, gridBagConstraints);

        FilterCircRNAsPanel.setBackground(new java.awt.Color(248, 248, 248));
        FilterCircRNAsPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createTitledBorder(""), "Filter parameters", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 0, 12), new java.awt.Color(77, 160, 73))); // NOI18N
        FilterCircRNAsPanel.setLayout(new java.awt.GridBagLayout());

        jLabel3.setText("min reads: ");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        FilterCircRNAsPanel.add(jLabel3, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        FilterCircRNAsPanel.add(minReadsTextField, gridBagConstraints);

        jLabel4.setText("min. replicates");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        FilterCircRNAsPanel.add(jLabel4, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        FilterCircRNAsPanel.add(minReplicatesTextField, gridBagConstraints);

        jLabel5.setText("min. avg");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        FilterCircRNAsPanel.add(jLabel5, gridBagConstraints);

        minAverageTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                minAverageTextFieldActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        FilterCircRNAsPanel.add(minAverageTextField, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        CircRNAMergePanel.add(FilterCircRNAsPanel, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        add(CircRNAMergePanel, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

    private void SudoRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SudoRadioButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_SudoRadioButtonActionPerformed

    private void DockerRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DockerRadioButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_DockerRadioButtonActionPerformed

    private void resetFormPostProcessingButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetFormPostProcessingButtonActionPerformed
        outputFolderTextField.setText("");
        samplesFolderTextField.setText("");
        scratchFolderTextField.setText("");
        DockerRadioButton.setSelected(true);
        clearSamplesGroupsTable();
        minAverageTextField.setText("");
        minReadsTextField.setText("");
        minReplicatesTextField.setText("");
        usedToolComboBox.setSelectedIndex(2);
        lastSelectedTool = (String) usedToolComboBox.getSelectedItem();
    }//GEN-LAST:event_resetFormPostProcessingButtonActionPerformed

    private void executeFormPostProcessingButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_executeFormPostProcessingButtonActionPerformed
        String execution = DockerRadioButton.isSelected() ? "docker" : "sudo";
        String outputFolder = outputFolderTextField.getText(),
               samplesFolder = samplesFolderTextField.getText(), 
               scratchFolder = scratchFolderTextField.getText();
        String used_tool = (String) usedToolComboBox.getSelectedItem();
        Integer min_reads, min_reps, min_avg; 
        
        if (MainFrame.checkPath(this, outputFolder, "output folder") ||
            MainFrame.checkPath(this, samplesFolder, "input folder") || 
            MainFrame.checkPath(this, scratchFolder, "scratch folder"))
            return; 
        
        if ((min_reads = MainFrame.checkIntValue(this, minReadsTextField.getText(), "min. number of reads")) == null || 
            (min_reps = MainFrame.checkIntValue(this, minReplicatesTextField.getText(), "min. number of replicates")) == null || 
            (min_avg = MainFrame.checkIntValue(this, minAverageTextField.getText(), "min. average")) == null)
            return; 
        
        if (min_reads < 0 || min_reps < 0 || min_avg < 0) {
            JOptionPane.showMessageDialog(this, 
                "Filter parameters must be positive integer values.",
                "Error: filter parameters", 
                JOptionPane.ERROR_MESSAGE);
            return; 
        }

        String samples = ""; 
        String covariates = ""; 
        int counter = 0; 
        
        for (TableEntry te: getDataFromTable()) 
            if (te.group != 0) {
                samples += te.sample + " "; 
                covariates += te.group + " ";
                
                counter++; 
            }
        
        if (counter == 0) {
            JOptionPane.showMessageDialog(this,
                "You have to select a samples folder containing at least one sample.",
                "Error: number of samples",
                JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        ScriptCaller parameters = new ScriptCaller("CircMergeSamples.R", outputFolder)
                .addArg("group", execution)
                .addArg("scratch_folder", scratchFolder)
                .addArg("data_folder", samplesFolder)
                .addArg("samples", samples)
                .addArg("covariates", covariates)
                .addArg("min_reads", min_reads)
                .addArg("min_reps", min_reps)
                .addArg("min_avg", min_avg)
                .addArg("used_tool", used_tool); 
        
        MainFrame.execCommand(this, "CircRNA merge " + used_tool + " output files", parameters);
    }//GEN-LAST:event_executeFormPostProcessingButtonActionPerformed

    private void closeFormPostProcessingButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeFormPostProcessingButtonActionPerformed
        MainFrame.setCard(null);
        resetFormPostProcessingButtonActionPerformed(evt);
    }//GEN-LAST:event_closeFormPostProcessingButtonActionPerformed

    private void cancelSamplesFolderButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelSamplesFolderButtonActionPerformed
        samplesFolderTextField.setText("");
        clearSamplesGroupsTable();
    }//GEN-LAST:event_cancelSamplesFolderButtonActionPerformed

    private void cancelOutputFolderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelOutputFolderActionPerformed
        outputFolderTextField.setText("");
    }//GEN-LAST:event_cancelOutputFolderActionPerformed

    private void browseSamplesFolderButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_browseSamplesFolderButtonActionPerformed
        MainFrame.browseTextFieldContent(this, samplesFolderTextField, JFileChooser.DIRECTORIES_ONLY);  
        String samplesPath = samplesFolderTextField.getText(); 
        if (!samplesPath.isEmpty() ) 
            fillSamplesGroupsTable();
            
    }//GEN-LAST:event_browseSamplesFolderButtonActionPerformed
    
    private void browseOutputFolderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_browseOutputFolderActionPerformed
        MainFrame.browseTextFieldContent(this, outputFolderTextField, JFileChooser.DIRECTORIES_ONLY);
    }//GEN-LAST:event_browseOutputFolderActionPerformed

    private void minAverageTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_minAverageTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_minAverageTextFieldActionPerformed

    private void browseScratchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_browseScratchActionPerformed
        MainFrame.browseTextFieldContent(this, scratchFolderTextField, JFileChooser.DIRECTORIES_ONLY);
    }//GEN-LAST:event_browseScratchActionPerformed

    private void cancelScratchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelScratchActionPerformed
        scratchFolderTextField.setText("");
    }//GEN-LAST:event_cancelScratchActionPerformed

    private void usedToolComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_usedToolComboBoxActionPerformed
        if (((String) usedToolComboBox.getSelectedItem()).equals(lastSelectedTool) == false) {
            //update table only if the user set another prediction tool 
            fillSamplesGroupsTable();
        }
    }//GEN-LAST:event_usedToolComboBoxActionPerformed
   
    private ArrayList<TableEntry> getDataFromTable() {
        ArrayList<TableEntry> data = new ArrayList<>();
        String sample; 
        int group; 
        
        for (int i = 0; i < samplesGroupsTable.getRowCount(); i++) {
            sample = (String) samplesGroupsTable.getValueAt(i, 0); 
            group = (int) samplesGroupsTable.getValueAt(i, 1); 
            
            data.add(new TableEntry(sample, group, -1));
        }
        
        return data; 
    }
    
    
    private void clearSamplesGroupsTable() {
        DefaultTableModel model = (DefaultTableModel) samplesGroupsTable.getModel();
        
        model.setNumRows(0);
    }
    
    private void fillSamplesGroupsTable() {
        String samplesFolderPath = samplesFolderTextField.getText();
        
        if (samplesFolderPath.isEmpty())
            return; 
        
        clearSamplesGroupsTable();
        
        DefaultTableModel model = (DefaultTableModel) samplesGroupsTable.getModel();        
        lastSelectedTool = (String) usedToolComboBox.getSelectedItem(); 
        String my_file_extension = "." + lastSelectedTool.toLowerCase();
        
        for (final File fileEntry: new File(samplesFolderPath).listFiles()) {
            if (fileEntry.isDirectory()) {
                for (final File content: fileEntry.listFiles()) {
                    //filter by file extension 
                    if (content.getName().toLowerCase().endsWith(my_file_extension)) {
                        String relpath = String.format("%s/%s", fileEntry.getName(), content.getName());
                        model.addRow(new Object[]{relpath, fileEntry.getName(), 0, 0});
//                        model.addRow(new Object[]{content.getName(), 0, 0});
                    }
                }
            }
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel CircRNAMergePanel;
    private javax.swing.JRadioButton DockerRadioButton;
    private javax.swing.JPanel ExecutionPanel;
    private javax.swing.JPanel FilterCircRNAsPanel;
    private javax.swing.JPanel SamplesPanel;
    private javax.swing.JRadioButton SudoRadioButton;
    private javax.swing.JButton browseOutputFolder;
    private javax.swing.JButton browseSamplesFolderButton;
    private javax.swing.JButton browseScratch;
    private javax.swing.JButton cancelOutputFolder;
    private javax.swing.JButton cancelSamplesFolderButton;
    private javax.swing.JButton cancelScratch;
    private javax.swing.JButton closeFormPostProcessingButton;
    private javax.swing.JButton executeFormPostProcessingButton;
    private javax.swing.ButtonGroup executionGroup;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel149;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField minAverageTextField;
    private javax.swing.JTextField minReadsTextField;
    private javax.swing.JTextField minReplicatesTextField;
    private javax.swing.JTextField outputFolderTextField;
    private javax.swing.JButton resetFormPostProcessingButton;
    private javax.swing.JTextField samplesFolderTextField;
    private javax.swing.JTable samplesGroupsTable;
    private javax.swing.JTextField scratchFolderTextField;
    private javax.swing.JComboBox<String> usedToolComboBox;
    // End of variables declaration//GEN-END:variables
}
