/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package pkg4seqgui;
import java.awt.CardLayout;
import java.io.File;
import java.io.IOException;
import java.util.Timer;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
/**
 *
 * @author user
 */
public class SampleSizePanel extends javax.swing.JPanel {

    /**
     * Creates new form SampleSizePanel
     */
    public SampleSizePanel() {
        initComponents();
    }
    private static final long serialVersionUID = 5778212333L;
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        SampleSizePanel = new javax.swing.JPanel();
        jPanel21 = new javax.swing.JPanel();
        jLabel64 = new javax.swing.JLabel();
        SSOutputFolderText = new javax.swing.JTextField();
        SSbrowes = new javax.swing.JButton();
        SScancel = new javax.swing.JButton();
        jLabel65 = new javax.swing.JLabel();
        jLabel66 = new javax.swing.JLabel();
        SSCountTableText = new javax.swing.JTextField();
        jButton27 = new javax.swing.JButton();
        jButton28 = new javax.swing.JButton();
        SSExecuteButton = new javax.swing.JButton();
        SSSaveButton = new javax.swing.JButton();
        SSResetButton = new javax.swing.JButton();
        SSCloseButton = new javax.swing.JButton();
        jPanel24 = new javax.swing.JPanel();
        jLabel77 = new javax.swing.JLabel();
        jLabel84 = new javax.swing.JLabel();
        jLabel85 = new javax.swing.JLabel();
        jLabel86 = new javax.swing.JLabel();
        SSPowerText = new javax.swing.JTextField();
        SSGeneText = new javax.swing.JTextField();
        SSlog2Text = new javax.swing.JTextField();
        jLabel87 = new javax.swing.JLabel();
        SSFDRtext = new javax.swing.JTextField();

        setLayout(new java.awt.GridBagLayout());

        SampleSizePanel.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEmptyBorder(30, 1, 1, 1), "Sample size estimator", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 1, 14), new java.awt.Color(218, 174, 0))); // NOI18N
        SampleSizePanel.setLayout(new java.awt.GridBagLayout());

        jPanel21.setBackground(new java.awt.Color(247, 248, 248));
        jPanel21.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        jPanel21.setLayout(new java.awt.GridBagLayout());

        jLabel64.setText("Output Folder:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        jPanel21.add(jLabel64, gridBagConstraints);

        SSOutputFolderText.setEditable(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 0.4;
        gridBagConstraints.insets = new java.awt.Insets(10, 48, 10, 10);
        jPanel21.add(SSOutputFolderText, gridBagConstraints);

        SSbrowes.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pkg4seqgui/images/52b.png"))); // NOI18N
        SSbrowes.setText("Browse");
        SSbrowes.setToolTipText("");
        SSbrowes.setEnabled(false);
        SSbrowes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SSbrowesActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        gridBagConstraints.weighty = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        jPanel21.add(SSbrowes, gridBagConstraints);

        SScancel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pkg4seqgui/images/33b.png"))); // NOI18N
        SScancel.setText("Cancel");
        SScancel.setEnabled(false);
        SScancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SScancelActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.BASELINE_TRAILING;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        jPanel21.add(SScancel, gridBagConstraints);
        jPanel21.add(jLabel65, new java.awt.GridBagConstraints());

        jLabel66.setText("Count table file:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        jPanel21.add(jLabel66, gridBagConstraints);

        SSCountTableText.setEditable(false);
        SSCountTableText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SSCountTableTextActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(10, 48, 10, 10);
        jPanel21.add(SSCountTableText, gridBagConstraints);

        jButton27.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pkg4seqgui/images/fileb.png"))); // NOI18N
        jButton27.setText("Browse");
        jButton27.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton27ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        jPanel21.add(jButton27, gridBagConstraints);

        jButton28.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pkg4seqgui/images/33b.png"))); // NOI18N
        jButton28.setText("Cancel");
        jButton28.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton28ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        jPanel21.add(jButton28, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        SampleSizePanel.add(jPanel21, gridBagConstraints);

        SSExecuteButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pkg4seqgui/images/exec.png"))); // NOI18N
        SSExecuteButton.setText("Execute");
        SSExecuteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SSExecuteButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_END;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.weighty = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        SampleSizePanel.add(SSExecuteButton, gridBagConstraints);

        SSSaveButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pkg4seqgui/images/86b.png"))); // NOI18N
        SSSaveButton.setText("Save conf.");
        SSSaveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SSSaveButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_END;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        SampleSizePanel.add(SSSaveButton, gridBagConstraints);

        SSResetButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pkg4seqgui/images/reset.png"))); // NOI18N
        SSResetButton.setText("Reset");
        SSResetButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SSResetButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_END;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        SampleSizePanel.add(SSResetButton, gridBagConstraints);

        SSCloseButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pkg4seqgui/images/close.png"))); // NOI18N
        SSCloseButton.setText("Close");
        SSCloseButton.setToolTipText("");
        SSCloseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SSCloseButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_END;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        SampleSizePanel.add(SSCloseButton, gridBagConstraints);

        jPanel24.setBackground(new java.awt.Color(247, 248, 248));
        jPanel24.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        jPanel24.setLayout(new java.awt.GridBagLayout());

        jLabel77.setText("Log2 fold change:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        jPanel24.add(jLabel77, gridBagConstraints);

        jLabel84.setText("#gene for dispertion:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        jPanel24.add(jLabel84, gridBagConstraints);
        jPanel24.add(jLabel85, new java.awt.GridBagConstraints());

        jLabel86.setText("Statistical power:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        jPanel24.add(jLabel86, gridBagConstraints);

        SSPowerText.setText("0.8");
        SSPowerText.setToolTipText("expected statistical power required to detect prognostic genes");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        jPanel24.add(SSPowerText, gridBagConstraints);

        SSGeneText.setText("200");
        SSGeneText.setToolTipText(" an integer indicating the number of genes used in estimation of read counts and dispersion distribution");
        SSGeneText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SSGeneTextActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 0.4;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        jPanel24.add(SSGeneText, gridBagConstraints);

        SSlog2Text.setText("1");
        SSlog2Text.setToolTipText("an integer indicating the minimum log2 fold change for prognostic genes between two group");
        SSlog2Text.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SSlog2TextActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        jPanel24.add(SSlog2Text, gridBagConstraints);

        jLabel87.setText("False discovery rate:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        jPanel24.add(jLabel87, gridBagConstraints);

        SSFDRtext.setText("0.1");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        jPanel24.add(SSFDRtext, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        SampleSizePanel.add(jPanel24, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.weighty = 0.1;
        add(SampleSizePanel, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

    private void SSbrowesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SSbrowesActionPerformed
        JFileChooser openDir = new JFileChooser();
        if (!(SSOutputFolderText.getText().equals(""))){
            File file =new File(SSOutputFolderText.getText());
            if (file.isDirectory())
            openDir.setCurrentDirectory(file);
        }
        else
        {
            String curDir = MainFrame.getPreferences().get("open-dir", null);
            openDir.setCurrentDirectory(curDir!=null ? new File(curDir) : null);
        }
        openDir.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        if (openDir.showOpenDialog(this)==JFileChooser.APPROVE_OPTION){
            File f = openDir.getSelectedFile();
            SSOutputFolderText.setText(String.valueOf(f));
        }
        MainFrame.getPreferences().put("open-dir",openDir.getCurrentDirectory().getAbsolutePath());
    }//GEN-LAST:event_SSbrowesActionPerformed

    private void SScancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SScancelActionPerformed
        SSOutputFolderText.setText("");
    }//GEN-LAST:event_SScancelActionPerformed

    private void SSCountTableTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SSCountTableTextActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_SSCountTableTextActionPerformed

    private void jButton27ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton27ActionPerformed
        JFileChooser openDir = new JFileChooser();
        if (!(SSCountTableText.getText().equals(""))){
            File file =new File(SSOutputFolderText.getText());
            if (file.isDirectory())
            openDir.setCurrentDirectory(file);
        }
        else
        {
            String curDir = MainFrame.getPreferences().get("open-dir", null);
            openDir.setCurrentDirectory(curDir!=null ? new File(curDir) : null);
        }
        openDir.setFileSelectionMode(JFileChooser.FILES_ONLY);
        if (openDir.showOpenDialog(this)==JFileChooser.APPROVE_OPTION){
            File f = openDir.getSelectedFile();
            SSCountTableText.setText(String.valueOf(f));
            SSOutputFolderText.setText(openDir.getCurrentDirectory().getAbsolutePath());
        }
        MainFrame.getPreferences().put("open-dir",openDir.getCurrentDirectory().getAbsolutePath());
    }//GEN-LAST:event_jButton27ActionPerformed

    private void jButton28ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton28ActionPerformed
        SSCountTableText.setText("");
        SSOutputFolderText.setText("");
    }//GEN-LAST:event_jButton28ActionPerformed

    private void SSExecuteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SSExecuteButtonActionPerformed
        if (SSCountTableText.getText().isEmpty()){
            JOptionPane.showMessageDialog(this, "You have to specified an input file","Error: input file",JOptionPane.ERROR_MESSAGE);
            return;
        }

        if (SSOutputFolderText.getText().isEmpty()){
            JOptionPane.showMessageDialog(this, "You have to specified an output  folder","Error: output folder",JOptionPane.ERROR_MESSAGE);
            return;
        }

        try
        {
            Float x = Float.valueOf(SSPowerText.getText());
            if (x<=0){
                JOptionPane.showMessageDialog(this, "You have to specified a value greater than 0.","Error:  Statistical power",JOptionPane.ERROR_MESSAGE);
                SSPowerText.requestFocusInWindow();
                return;
            }
        }
        catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "You have to specified  a value for Log2fc threashold.","Error: Statistical power",JOptionPane.ERROR_MESSAGE);
            SSPowerText.requestFocusInWindow();
            return;
        }

        try
        {
            Float x = Float.valueOf(SSFDRtext.getText());
            if (x<=0){
                JOptionPane.showMessageDialog(this, "You have to specified a value greater than 0.","Error: FDR threashold",JOptionPane.ERROR_MESSAGE);
                SSFDRtext.requestFocusInWindow();
                return;
            }
        }
        catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "You have to specified a value for the FDR threashold","Error: FDR threashold",JOptionPane.ERROR_MESSAGE);
            SSFDRtext.requestFocusInWindow();
            return;
        }

        try
        {
            Float x = Float.valueOf(SSGeneText.getText());
            if (x<=0){
                JOptionPane.showMessageDialog(this, "You have to specified a value greater than 0.","Error: #gene for dispertion",JOptionPane.ERROR_MESSAGE);
                SSGeneText.requestFocusInWindow();
                return;
            }
        }
        catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "You have to specified a value for the FDR threashold","Error: #gene for dispertion",JOptionPane.ERROR_MESSAGE);
            SSGeneText.requestFocusInWindow();
            return;
        }

        try
        {
            Float x = Float.valueOf(SSlog2Text.getText());
            if (x<=0){
                JOptionPane.showMessageDialog(this, "You have to specified a value greater than 0.","Error: Log2 fold change",JOptionPane.ERROR_MESSAGE);
                SSlog2Text.requestFocusInWindow();
                return;
            }
        }
        catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "You have to specified a value for the FDR threashold","Error: Log2 fold change",JOptionPane.ERROR_MESSAGE);
            SSlog2Text.requestFocusInWindow();
            return;
        }

        Runtime rt = Runtime.getRuntime();
        //execute code

        try{
            String[] cmd = {"/bin/bash","-c","   bash ./execSampleSize.sh "};

            cmd[2]+= " filename=\\\""+ SSCountTableText.getText() +"\\\"";
            cmd[2]+= " power="+ SSPowerText.getText();
            cmd[2]+= " FDR="+ SSFDRtext.getText();
            cmd[2]+= " genes4dispersion="+ SSGeneText.getText();
            cmd[2]+= " log2fold.change="+ SSlog2Text.getText();
            cmd[2]+= " output.folder=\\\""+ SSOutputFolderText.getText() +"\\\"";
            cmd[2]+=" "+ SSOutputFolderText.getText()+" >& "+SSOutputFolderText.getText()+"/outputExecution ";
            //ProcessStatus.setText(pr.toString());
            if (MainFrame.listProcRunning.size()<MainFrame.GS.getMaxSizelistProcRunning()){
                Process pr = rt.exec(cmd);
                System.out.println(cmd[2]);
                MainFrame.ElProcRunning tmp= new MainFrame.ElProcRunning("Sample Size Estimator ", SSOutputFolderText.getText() ,pr,MainFrame.listModel.getSize());
                MainFrame.listProcRunning.add(tmp);
                java.net.URL imgURL = getClass().getResource("/pkg4seqgui/images/running.png");
                ImageIcon image2 = new ImageIcon(imgURL);
                MainFrame.GL.setAvoidProcListValueChanged(-1);
                MainFrame.listModel.addElement(new MainFrame.ListEntry(" [Running]   "+tmp.toString(),"Running",tmp.path, image2 ));
                MainFrame.GL.setAvoidProcListValueChanged(0);
                if(MainFrame.listProcRunning.size()==1){
                    MainFrame.t=new Timer();
                    MainFrame.t.scheduleAtFixedRate(new MainFrame.MyTask(), 5000, 5000);
                }
            }
            else{
                MainFrame.ElProcWaiting tmp= new MainFrame.ElProcWaiting("Sample Size Estimator  ", SSOutputFolderText.getText(),cmd,MainFrame.listModel.getSize());
                MainFrame.listProcWaiting.add(tmp);
                java.net.URL imgURL = getClass().getResource("/pkg4seqgui/images/waiting.png");
                ImageIcon image2 = new ImageIcon(imgURL);
                MainFrame.GL.setAvoidProcListValueChanged(-1);
                MainFrame.listModel.addElement(new MainFrame.ListEntry(" [Waiting]   "+tmp.toString(),"Waiting",tmp.path,image2));
                MainFrame.GL.setAvoidProcListValueChanged(0);
            }
            MainFrame.GL.setAvoidProcListValueChanged(-1);
            MainFrame.ProcList.setModel(MainFrame.listModel);
            MainFrame.ProcList.setCellRenderer(new MainFrame.ListEntryCellRenderer());
            MainFrame.GL.setAvoidProcListValueChanged(0);
        }
        catch(IOException e) {
            JOptionPane.showMessageDialog(this, e.toString(),"Error execution",JOptionPane.ERROR_MESSAGE);
            System.out.println(e.toString());
        }
        JOptionPane.showMessageDialog(this, "Sample Size Estimator task was scheduled","Confermation",JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_SSExecuteButtonActionPerformed

    private void SSSaveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SSSaveButtonActionPerformed
       // saveAsMenuItemActionPerformed(evt);
    }//GEN-LAST:event_SSSaveButtonActionPerformed

    private void SSResetButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SSResetButtonActionPerformed
        SSCountTableText.setText("");
        SSFDRtext.setText("0.1");
        SSGeneText.setText("200");
        SSOutputFolderText.setText("");
        SSPowerText.setText("0.8");
        SSlog2Text.setText("1");
    }//GEN-LAST:event_SSResetButtonActionPerformed

    private void SSCloseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SSCloseButtonActionPerformed
        SSCountTableText.setText("");
        SSFDRtext.setText("0.1");
        SSGeneText.setText("200");
        SSOutputFolderText.setText("");
        SSPowerText.setText("0.8");
        SSlog2Text.setText("1");
        CardLayout card = (CardLayout)MainFrame.MainPanel.getLayout();
        card.show(MainFrame.MainPanel, "Empty");
        MainFrame.CurrentLayout="Empty";
        // AnalysisTree.clearSelection();
    }//GEN-LAST:event_SSCloseButtonActionPerformed

    private void SSGeneTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SSGeneTextActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_SSGeneTextActionPerformed

    private void SSlog2TextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SSlog2TextActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_SSlog2TextActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton SSCloseButton;
    private javax.swing.JTextField SSCountTableText;
    private javax.swing.JButton SSExecuteButton;
    private javax.swing.JTextField SSFDRtext;
    private javax.swing.JTextField SSGeneText;
    private javax.swing.JTextField SSOutputFolderText;
    private javax.swing.JTextField SSPowerText;
    private javax.swing.JButton SSResetButton;
    private javax.swing.JButton SSSaveButton;
    private javax.swing.JButton SSbrowes;
    private javax.swing.JButton SScancel;
    private javax.swing.JTextField SSlog2Text;
    private javax.swing.JPanel SampleSizePanel;
    private javax.swing.JButton jButton27;
    private javax.swing.JButton jButton28;
    private javax.swing.JLabel jLabel64;
    private javax.swing.JLabel jLabel65;
    private javax.swing.JLabel jLabel66;
    private javax.swing.JLabel jLabel77;
    private javax.swing.JLabel jLabel84;
    private javax.swing.JLabel jLabel85;
    private javax.swing.JLabel jLabel86;
    private javax.swing.JLabel jLabel87;
    private javax.swing.JPanel jPanel21;
    private javax.swing.JPanel jPanel24;
    // End of variables declaration//GEN-END:variables
}
