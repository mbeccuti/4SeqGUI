/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package pkg4seqgui;

import java.awt.CardLayout;
import java.io.File;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;

/**
 *
 * @author Nicola Licheri
 */
public class MiRNAGenomeIndexing extends javax.swing.JPanel {
    private static final long serialVersionUID = 9778212350L;
    private String mode; 

    /**
     * Creates new form MiRNAQuantification
     */
    public MiRNAGenomeIndexing() {
        initComponents();
        this.mode = "general";
    }
    
    private void changeCard(String newMode) {
        if (!newMode.equals(this.mode)) {
            /* TODO - setta card */
            this.mode = newMode; 
            CardLayout card = (CardLayout) modePanel.getLayout();
            card.show(modePanel, this.mode);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        indexModeGroup = new javax.swing.ButtonGroup();
        executionGroup = new javax.swing.ButtonGroup();
        mirnaIndexingPanel = new javax.swing.JPanel();
        ExecutionPanel = new javax.swing.JPanel();
        jLabel144 = new javax.swing.JLabel();
        SudoRadioButton = new javax.swing.JRadioButton();
        DockerRadioButton = new javax.swing.JRadioButton();
        jLabel7 = new javax.swing.JLabel();
        genomePanel = new javax.swing.JPanel();
        modeGeneralButton = new javax.swing.JRadioButton();
        modeGATKButton = new javax.swing.JRadioButton();
        modeMiRNAButton = new javax.swing.JRadioButton();
        modeNcRNAButton = new javax.swing.JRadioButton();
        jLabel1 = new javax.swing.JLabel();
        genomeFolderTextField = new javax.swing.JTextField();
        scratchFolderTextField = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        browseGenomeButton = new javax.swing.JButton();
        cancelGenomeButton = new javax.swing.JButton();
        browseScratchButton = new javax.swing.JButton();
        cancelScratchButton = new javax.swing.JButton();
        jLabel14 = new javax.swing.JLabel();
        modePanel = new javax.swing.JPanel();
        generalModePanel = new javax.swing.JPanel();
        generalPanel = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        generalGenomeUrlTextField = new javax.swing.JTextField();
        gatkModePanel = new javax.swing.JPanel();
        gatkPanel = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        gatkGenomeUrlTextField = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        gatkDbsnpFileTextField = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        gatk1000genomesFileTextField = new javax.swing.JTextField();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jButton7 = new javax.swing.JButton();
        mirnaModePanel = new javax.swing.JPanel();
        mirnaPanel = new javax.swing.JPanel();
        jLabel9 = new javax.swing.JLabel();
        mirbaseVersionTextField = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        mirbaseSpecieTextField = new javax.swing.JTextField();
        ncrnaModePanel = new javax.swing.JPanel();
        ncrnaPanel = new javax.swing.JPanel();
        jLabel11 = new javax.swing.JLabel();
        ncrnaVersionTextField = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        ncrnaSpecieTextField = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        ncLengthThresholdTextField = new javax.swing.JTextField();
        executeFormMiRNAIndexingButton = new javax.swing.JButton();
        resetFormMiRNAIndexingButton = new javax.swing.JButton();
        closeFormMiRNAIndexingButton = new javax.swing.JButton();

        setLayout(new java.awt.GridBagLayout());

        mirnaIndexingPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEmptyBorder(30, 1, 1, 1), "Genome indexing for miRNA analysis", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 1, 14), new java.awt.Color(16, 149, 92))); // NOI18N
        mirnaIndexingPanel.setLayout(new java.awt.GridBagLayout());

        ExecutionPanel.setBackground(new java.awt.Color(248, 248, 248));
        ExecutionPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        ExecutionPanel.setToolTipText(null);
        ExecutionPanel.setLayout(new java.awt.GridBagLayout());

        jLabel144.setText("Execution:");
        jLabel144.setToolTipText(null);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.BASELINE_LEADING;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        ExecutionPanel.add(jLabel144, gridBagConstraints);

        SudoRadioButton.setBackground(new java.awt.Color(248, 248, 248));
        executionGroup.add(SudoRadioButton);
        SudoRadioButton.setText("sudo");
        SudoRadioButton.setToolTipText(null);
        SudoRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SudoRadioButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.BASELINE_LEADING;
        gridBagConstraints.insets = new java.awt.Insets(10, 53, 10, 10);
        ExecutionPanel.add(SudoRadioButton, gridBagConstraints);

        DockerRadioButton.setBackground(new java.awt.Color(248, 248, 248));
        executionGroup.add(DockerRadioButton);
        DockerRadioButton.setSelected(true);
        DockerRadioButton.setText("docker");
        DockerRadioButton.setToolTipText(null);
        DockerRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DockerRadioButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.BASELINE_LEADING;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        ExecutionPanel.add(DockerRadioButton, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.weightx = 10.0;
        ExecutionPanel.add(jLabel7, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        mirnaIndexingPanel.add(ExecutionPanel, gridBagConstraints);

        genomePanel.setBackground(new java.awt.Color(248, 248, 248));
        genomePanel.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        genomePanel.setLayout(new java.awt.GridBagLayout());

        indexModeGroup.add(modeGeneralButton);
        modeGeneralButton.setSelected(true);
        modeGeneralButton.setText("General");
        modeGeneralButton.setName("general"); // NOI18N
        modeGeneralButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                modeGeneralButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.insets = new java.awt.Insets(10, 15, 10, 10);
        genomePanel.add(modeGeneralButton, gridBagConstraints);

        indexModeGroup.add(modeGATKButton);
        modeGATKButton.setText("GATK");
        modeGATKButton.setName("gatk"); // NOI18N
        modeGATKButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                modeGATKButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        genomePanel.add(modeGATKButton, gridBagConstraints);

        indexModeGroup.add(modeMiRNAButton);
        modeMiRNAButton.setText("miRNA");
        modeMiRNAButton.setName("mirna"); // NOI18N
        modeMiRNAButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                modeMiRNAButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        genomePanel.add(modeMiRNAButton, gridBagConstraints);

        indexModeGroup.add(modeNcRNAButton);
        modeNcRNAButton.setText("ncRNA");
        modeNcRNAButton.setName("ncrna"); // NOI18N
        modeNcRNAButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                modeNcRNAButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        genomePanel.add(modeNcRNAButton, gridBagConstraints);

        jLabel1.setText("Mode:  ");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        genomePanel.add(jLabel1, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(10, 15, 10, 10);
        genomePanel.add(genomeFolderTextField, gridBagConstraints);

        scratchFolderTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                scratchFolderTextFieldActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(10, 15, 10, 10);
        genomePanel.add(scratchFolderTextField, gridBagConstraints);

        jLabel2.setText("Scratch folder: ");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        genomePanel.add(jLabel2, gridBagConstraints);

        browseGenomeButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pkg4seqgui/images/fileb.png"))); // NOI18N
        browseGenomeButton.setText("Browse");
        browseGenomeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                browseGenomeButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        genomePanel.add(browseGenomeButton, gridBagConstraints);

        cancelGenomeButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pkg4seqgui/images/33b.png"))); // NOI18N
        cancelGenomeButton.setText("Cancel");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 6;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        genomePanel.add(cancelGenomeButton, gridBagConstraints);

        browseScratchButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pkg4seqgui/images/52b.png"))); // NOI18N
        browseScratchButton.setText("Browse");
        browseScratchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                browseScratchButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        genomePanel.add(browseScratchButton, gridBagConstraints);

        cancelScratchButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pkg4seqgui/images/33b.png"))); // NOI18N
        cancelScratchButton.setText("Cancel");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 6;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        genomePanel.add(cancelScratchButton, gridBagConstraints);

        jLabel14.setText("Genome folder:  ");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        genomePanel.add(jLabel14, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        mirnaIndexingPanel.add(genomePanel, gridBagConstraints);

        modePanel.setBackground(new java.awt.Color(248, 248, 248));
        modePanel.setLayout(new java.awt.CardLayout());

        generalModePanel.setLayout(new java.awt.GridBagLayout());

        generalPanel.setBackground(new java.awt.Color(248, 248, 248));
        generalPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        generalPanel.setLayout(new java.awt.GridBagLayout());

        jLabel3.setText("Genome URL:  ");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.BASELINE;
        gridBagConstraints.weighty = 0.4;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        generalPanel.add(jLabel3, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.BASELINE;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.weighty = 5.1;
        gridBagConstraints.insets = new java.awt.Insets(10, 26, 10, 10);
        generalPanel.add(generalGenomeUrlTextField, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.weighty = 0.3;
        generalModePanel.add(generalPanel, gridBagConstraints);

        modePanel.add(generalModePanel, "general");

        gatkModePanel.setLayout(new java.awt.GridBagLayout());

        gatkPanel.setBackground(new java.awt.Color(248, 248, 248));
        gatkPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        gatkPanel.setLayout(new java.awt.GridBagLayout());

        jLabel4.setText("Genome URL:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        gatkPanel.add(jLabel4, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(10, 34, 10, 10);
        gatkPanel.add(gatkGenomeUrlTextField, gridBagConstraints);

        jLabel6.setText("dbsnp file:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        gatkPanel.add(jLabel6, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(10, 34, 10, 10);
        gatkPanel.add(gatkDbsnpFileTextField, gridBagConstraints);

        jLabel8.setText("1000g file:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        gatkPanel.add(jLabel8, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(10, 34, 10, 10);
        gatkPanel.add(gatk1000genomesFileTextField, gridBagConstraints);

        jButton4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pkg4seqgui/images/fileb.png"))); // NOI18N
        jButton4.setText("Browse");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        gatkPanel.add(jButton4, gridBagConstraints);

        jButton5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pkg4seqgui/images/33b.png"))); // NOI18N
        jButton5.setText("Cancel");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        gatkPanel.add(jButton5, gridBagConstraints);

        jButton6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pkg4seqgui/images/fileb.png"))); // NOI18N
        jButton6.setText("Browse");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        gatkPanel.add(jButton6, gridBagConstraints);

        jButton7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pkg4seqgui/images/33b.png"))); // NOI18N
        jButton7.setText("Cancel");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        gatkPanel.add(jButton7, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.weighty = 0.1;
        gatkModePanel.add(gatkPanel, gridBagConstraints);

        modePanel.add(gatkModePanel, "gatk");

        mirnaModePanel.setLayout(new java.awt.GridBagLayout());

        mirnaPanel.setBackground(new java.awt.Color(248, 248, 248));
        mirnaPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        mirnaPanel.setLayout(new java.awt.GridBagLayout());

        jLabel9.setText("mirbase version:  ");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.BASELINE_LEADING;
        gridBagConstraints.weighty = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        mirnaPanel.add(jLabel9, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.BASELINE;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        mirnaPanel.add(mirbaseVersionTextField, gridBagConstraints);

        jLabel10.setText("species:  ");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.BASELINE_LEADING;
        gridBagConstraints.weighty = 2.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        mirnaPanel.add(jLabel10, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.BASELINE;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        mirnaPanel.add(mirbaseSpecieTextField, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.weighty = 0.1;
        mirnaModePanel.add(mirnaPanel, gridBagConstraints);

        modePanel.add(mirnaModePanel, "mirna");

        ncrnaModePanel.setLayout(new java.awt.GridBagLayout());

        ncrnaPanel.setBackground(new java.awt.Color(248, 248, 248));
        ncrnaPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        ncrnaPanel.setLayout(new java.awt.GridBagLayout());

        jLabel11.setText("RC db version: ");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        ncrnaPanel.add(jLabel11, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(10, 27, 10, 10);
        ncrnaPanel.add(ncrnaVersionTextField, gridBagConstraints);

        jLabel12.setText("species:  ");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        ncrnaPanel.add(jLabel12, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(10, 27, 10, 10);
        ncrnaPanel.add(ncrnaSpecieTextField, gridBagConstraints);

        jLabel13.setText("length:  ");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        ncrnaPanel.add(jLabel13, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(10, 27, 10, 10);
        ncrnaPanel.add(ncLengthThresholdTextField, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.weighty = 0.1;
        ncrnaModePanel.add(ncrnaPanel, gridBagConstraints);

        modePanel.add(ncrnaModePanel, "ncrna");

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        mirnaIndexingPanel.add(modePanel, gridBagConstraints);

        executeFormMiRNAIndexingButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pkg4seqgui/images/exec.png"))); // NOI18N
        executeFormMiRNAIndexingButton.setText("Execute");
        executeFormMiRNAIndexingButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                executeFormMiRNAIndexingButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_END;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        mirnaIndexingPanel.add(executeFormMiRNAIndexingButton, gridBagConstraints);

        resetFormMiRNAIndexingButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pkg4seqgui/images/reset.png"))); // NOI18N
        resetFormMiRNAIndexingButton.setText("Reset");
        resetFormMiRNAIndexingButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetFormMiRNAIndexingButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_END;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        mirnaIndexingPanel.add(resetFormMiRNAIndexingButton, gridBagConstraints);

        closeFormMiRNAIndexingButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pkg4seqgui/images/close.png"))); // NOI18N
        closeFormMiRNAIndexingButton.setText("Close");
        closeFormMiRNAIndexingButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeFormMiRNAIndexingButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_END;
        gridBagConstraints.weighty = 50.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        mirnaIndexingPanel.add(closeFormMiRNAIndexingButton, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        add(mirnaIndexingPanel, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

    private void SudoRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SudoRadioButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_SudoRadioButtonActionPerformed

    private void DockerRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DockerRadioButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_DockerRadioButtonActionPerformed

    private void modeGeneralButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_modeGeneralButtonActionPerformed
        changeCard("general");
    }//GEN-LAST:event_modeGeneralButtonActionPerformed

    private void modeGATKButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_modeGATKButtonActionPerformed
        changeCard("gatk");
    }//GEN-LAST:event_modeGATKButtonActionPerformed

    private void modeMiRNAButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_modeMiRNAButtonActionPerformed
        changeCard("mirna");
    }//GEN-LAST:event_modeMiRNAButtonActionPerformed

    private void modeNcRNAButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_modeNcRNAButtonActionPerformed
        changeCard("ncrna");
    }//GEN-LAST:event_modeNcRNAButtonActionPerformed

    private void closeFormMiRNAIndexingButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeFormMiRNAIndexingButtonActionPerformed
        MainFrame.setCard(null);
    }//GEN-LAST:event_closeFormMiRNAIndexingButtonActionPerformed

    private void resetFormMiRNAIndexingButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetFormMiRNAIndexingButtonActionPerformed
        genomeFolderTextField.setText("");
        scratchFolderTextField.setText("");
        generalGenomeUrlTextField.setText("");
        gatkGenomeUrlTextField.setText("");
        gatkDbsnpFileTextField.setText("");
        gatk1000genomesFileTextField.setText("");
        mirbaseVersionTextField.setText("");
        mirbaseSpecieTextField.setText("");
        ncrnaVersionTextField.setText("");
        ncrnaSpecieTextField.setText("");
        ncLengthThresholdTextField.setText("");
    }//GEN-LAST:event_resetFormMiRNAIndexingButtonActionPerformed

    private void browseGenomeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_browseGenomeButtonActionPerformed
        MainFrame.browseTextFieldContent(this, genomeFolderTextField, JFileChooser.FILES_ONLY);
    }//GEN-LAST:event_browseGenomeButtonActionPerformed

    private void browseScratchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_browseScratchButtonActionPerformed
        MainFrame.browseTextFieldContent(this, scratchFolderTextField, JFileChooser.DIRECTORIES_ONLY);
    }//GEN-LAST:event_browseScratchButtonActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        MainFrame.browseTextFieldContent(this, gatkDbsnpFileTextField, JFileChooser.FILES_ONLY);
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        MainFrame.browseTextFieldContent(this, gatk1000genomesFileTextField, JFileChooser.FILES_ONLY);
    }//GEN-LAST:event_jButton6ActionPerformed

    private void scratchFolderTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_scratchFolderTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_scratchFolderTextFieldActionPerformed

    private void executeFormMiRNAIndexingButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_executeFormMiRNAIndexingButtonActionPerformed
        String group = DockerRadioButton.isSelected() ? "docker" : "sudo"; 
        String genomeFolder = genomeFolderTextField.getText(), 
               scratchFolder = scratchFolderTextField.getText(), 
               generalGenomeURL = generalGenomeUrlTextField.getText(), 
               gatkGenomeURL = gatkGenomeUrlTextField.getText(), 
               gatkDbsnpFile = gatkDbsnpFileTextField.getText(), 
               gatk1000GFile = gatk1000genomesFileTextField.getText(), 
               mirbaseVersion = mirbaseVersionTextField.getText(), 
               mirbaseSpecies = mirbaseSpecieTextField.getText(), 
               ncrnaVersion = ncrnaVersionTextField.getText(), 
               ncrnaSpecies = ncrnaSpecieTextField.getText();
        String selectedMode = /* I <3 ternary operator */
            modeGeneralButton.isSelected() ? "General" :
                modeGATKButton.isSelected() ? "GATK" : 
                    modeMiRNAButton.isSelected() ? "miRNA" : "ncRNA"; 
        int ncrnaLength = 0; 
        
        if (genomeFolder.isEmpty()) {
            JOptionPane.showMessageDialog(this, 
                "You have to specify the genome folder.",
                "Error: genome folder", 
                JOptionPane.ERROR_MESSAGE);
            return; 
        }
        if (scratchFolder.isEmpty()) {
            JOptionPane.showMessageDialog(this, 
                "You have to specify the scratch folder.",
                "Error: scratch folder", 
                JOptionPane.ERROR_MESSAGE);
            return; 
        }
        
        String specificArgs = null; 
        
        switch (selectedMode) {
            case "General":
                if (generalGenomeURL.trim().isEmpty()) {
                    JOptionPane.showMessageDialog(this, 
                        "You have to specify the genome URL.",
                        "Error: genome URL", 
                        JOptionPane.ERROR_MESSAGE);
                    return; 
                }
                
                specificArgs = String.format("genome.url='%s'", generalGenomeURL);
                break;
            case "GATK":
                if (gatkGenomeURL.trim().isEmpty()) {
                    JOptionPane.showMessageDialog(this, 
                        "You have to specify the genome URL.",
                        "Error: genome URL", 
                        JOptionPane.ERROR_MESSAGE);
                    return; 
                }
                if (gatkDbsnpFile.isEmpty()) {
                    JOptionPane.showMessageDialog(this, 
                        "You have to specify the variant file from dbsnp.",
                        "Error: dbsnp file", 
                        JOptionPane.ERROR_MESSAGE);
                    return;
                }
                if (gatk1000GFile.isEmpty()) {
                    JOptionPane.showMessageDialog(this, 
                        "You have to specify the 1000g file.",
                        "Error: 1000g file", 
                        JOptionPane.ERROR_MESSAGE);
                    return; 
                }
                
                specificArgs = String.format("genome.url='%s' dbsnp.file='%s' g1000.file='%s'",
                        gatkGenomeURL, gatkDbsnpFile, gatk1000GFile);
                break;
            case "miRNA":
                if (mirbaseVersion.trim().isEmpty()) {
                    JOptionPane.showMessageDialog(this, 
                        "You have to specify the mirbase version.",
                        "Error: mirbase version", 
                        JOptionPane.ERROR_MESSAGE);
                    return; 
                }
                if (mirbaseSpecies.trim().isEmpty()) {
                    JOptionPane.showMessageDialog(this, 
                        "You have to specify the mirbase species.",
                        "Error: mirbase species", 
                        JOptionPane.ERROR_MESSAGE);
                    return; 
                }
                
                specificArgs = String.format("mb.version='%s' mb.species='%s'",
                        mirbaseVersion, mirbaseSpecies);
                break;
            case "ncRNA":
                if (ncrnaVersion.trim().isEmpty()) {
                    JOptionPane.showMessageDialog(this, 
                        "You have to specify the RNA central db version.",
                        "Error: version info", 
                        JOptionPane.ERROR_MESSAGE);
                    return; 
                }
                if (ncrnaSpecies.trim().isEmpty()) {
                    JOptionPane.showMessageDialog(this, 
                        "You have to specify the RNA central species.",
                        "Error: species info", 
                        JOptionPane.ERROR_MESSAGE);
                    return; 
                }
                
                try {
                    ncrnaLength = Integer.parseInt(ncLengthThresholdTextField.getText());
                    
                    if (ncrnaLength <= 0) 
                        throw new NumberFormatException();
                }
                catch (NumberFormatException e) {
                    JOptionPane.showMessageDialog(this, 
                        "You have to specify the mirbase species.",
                        "Error: mirbase species", 
                        JOptionPane.ERROR_MESSAGE);
                    return; 
                }
                
                specificArgs = String.format("rc.version='%s' rc.species='%s' length=%d",
                        ncrnaVersion, ncrnaSpecies, ncrnaLength);
                break;
        }
        
        String command = String.format(
            "group='%s' mode='%s' genome.folder='%s' %s", group, selectedMode, genomeFolder, specificArgs)
                .replace("'", "\\\""); 
        
        MainFrame.execCommand(this, "miRNA genome indexing", "execMiRNAIndexing.sh", command, genomeFolder);
    }//GEN-LAST:event_executeFormMiRNAIndexingButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JRadioButton DockerRadioButton;
    private javax.swing.JPanel ExecutionPanel;
    private javax.swing.JRadioButton SudoRadioButton;
    private javax.swing.JButton browseGenomeButton;
    private javax.swing.JButton browseScratchButton;
    private javax.swing.JButton cancelGenomeButton;
    private javax.swing.JButton cancelScratchButton;
    private javax.swing.JButton closeFormMiRNAIndexingButton;
    private javax.swing.JButton executeFormMiRNAIndexingButton;
    private javax.swing.ButtonGroup executionGroup;
    private javax.swing.JTextField gatk1000genomesFileTextField;
    private javax.swing.JTextField gatkDbsnpFileTextField;
    private javax.swing.JTextField gatkGenomeUrlTextField;
    private javax.swing.JPanel gatkModePanel;
    private javax.swing.JPanel gatkPanel;
    private javax.swing.JTextField generalGenomeUrlTextField;
    private javax.swing.JPanel generalModePanel;
    private javax.swing.JPanel generalPanel;
    private javax.swing.JTextField genomeFolderTextField;
    private javax.swing.JPanel genomePanel;
    private javax.swing.ButtonGroup indexModeGroup;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel144;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JTextField mirbaseSpecieTextField;
    private javax.swing.JTextField mirbaseVersionTextField;
    private javax.swing.JPanel mirnaIndexingPanel;
    private javax.swing.JPanel mirnaModePanel;
    private javax.swing.JPanel mirnaPanel;
    private javax.swing.JRadioButton modeGATKButton;
    private javax.swing.JRadioButton modeGeneralButton;
    private javax.swing.JRadioButton modeMiRNAButton;
    private javax.swing.JRadioButton modeNcRNAButton;
    private javax.swing.JPanel modePanel;
    private javax.swing.JTextField ncLengthThresholdTextField;
    private javax.swing.JPanel ncrnaModePanel;
    private javax.swing.JPanel ncrnaPanel;
    private javax.swing.JTextField ncrnaSpecieTextField;
    private javax.swing.JTextField ncrnaVersionTextField;
    private javax.swing.JButton resetFormMiRNAIndexingButton;
    private javax.swing.JTextField scratchFolderTextField;
    // End of variables declaration//GEN-END:variables
}
