/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package pkg4seqgui;

import java.awt.CardLayout;
import java.io.File;
import java.io.IOException;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.Timer;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;

/**
 *
 * @author nico
 */
public class CircRNAPredictStructurePanel extends javax.swing.JPanel {

    /**
     * Creates new form CircRNAPredictStructurePanel
     */
    public CircRNAPredictStructurePanel() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        executionGroup = new javax.swing.ButtonGroup();
        StructurePanel = new javax.swing.JPanel();
        PostCiriDataPanel = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        alignmentDataTextField = new javax.swing.JTextField();
        referencePathTextField = new javax.swing.JTextField();
        browseAlignmentDataButton = new javax.swing.JButton();
        cancelAlignmentDataButton = new javax.swing.JButton();
        browseReferenceButton = new javax.swing.JButton();
        cancelReferenceButton = new javax.swing.JButton();
        browseCircrnaDataButton = new javax.swing.JButton();
        cancelCircrnaDataButton = new javax.swing.JButton();
        circrnaDataTextField = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        annotationDataTextField = new javax.swing.JTextField();
        browseAnnotationFileButton = new javax.swing.JButton();
        cancelAnnotationFileButton = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        scratchFolderTextField = new javax.swing.JTextField();
        browseScratchFolderButton1 = new javax.swing.JButton();
        cancelScratchFolderButton1 = new javax.swing.JButton();
        closeFormPostProcessingButton = new javax.swing.JButton();
        executeFormPostProcessingButton = new javax.swing.JButton();
        resetFormPostProcessingButton = new javax.swing.JButton();
        ExecutionPanel = new javax.swing.JPanel();
        jLabel149 = new javax.swing.JLabel();
        SudoRadioButton = new javax.swing.JRadioButton();
        DockerRadioButton = new javax.swing.JRadioButton();

        setLayout(new java.awt.GridBagLayout());

        StructurePanel.setBorder(javax.swing.BorderFactory.createTitledBorder("CircRNA structure prediction"));
        StructurePanel.setLayout(new java.awt.GridBagLayout());

        PostCiriDataPanel.setBackground(new java.awt.Color(248, 248, 248));
        PostCiriDataPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        PostCiriDataPanel.setLayout(new java.awt.GridBagLayout());

        jLabel1.setText("SAM/BAM file");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        PostCiriDataPanel.add(jLabel1, gridBagConstraints);

        jLabel2.setText("Genome path");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        PostCiriDataPanel.add(jLabel2, gridBagConstraints);

        jLabel3.setText("Dati circRNA");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        PostCiriDataPanel.add(jLabel3, gridBagConstraints);

        alignmentDataTextField.setEditable(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 0.1;
        PostCiriDataPanel.add(alignmentDataTextField, gridBagConstraints);

        referencePathTextField.setEditable(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 0.1;
        PostCiriDataPanel.add(referencePathTextField, gridBagConstraints);

        browseAlignmentDataButton.setText("Browse");
        browseAlignmentDataButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                browseAlignmentDataButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 6;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        gridBagConstraints.weightx = 0.1;
        PostCiriDataPanel.add(browseAlignmentDataButton, gridBagConstraints);

        cancelAlignmentDataButton.setText("Cancel");
        cancelAlignmentDataButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelAlignmentDataButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 8;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        PostCiriDataPanel.add(cancelAlignmentDataButton, gridBagConstraints);

        browseReferenceButton.setText("Browse");
        browseReferenceButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                browseReferenceButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 6;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        PostCiriDataPanel.add(browseReferenceButton, gridBagConstraints);

        cancelReferenceButton.setText("Cancel");
        cancelReferenceButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelReferenceButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 8;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        PostCiriDataPanel.add(cancelReferenceButton, gridBagConstraints);

        browseCircrnaDataButton.setText("Browse");
        browseCircrnaDataButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                browseCircrnaDataButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 6;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        PostCiriDataPanel.add(browseCircrnaDataButton, gridBagConstraints);

        cancelCircrnaDataButton.setText("Cancel");
        cancelCircrnaDataButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelCircrnaDataButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 8;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        PostCiriDataPanel.add(cancelCircrnaDataButton, gridBagConstraints);

        circrnaDataTextField.setEditable(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 0.1;
        PostCiriDataPanel.add(circrnaDataTextField, gridBagConstraints);

        jLabel4.setText("Annotation file");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        PostCiriDataPanel.add(jLabel4, gridBagConstraints);

        annotationDataTextField.setEditable(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 0.1;
        PostCiriDataPanel.add(annotationDataTextField, gridBagConstraints);

        browseAnnotationFileButton.setText("Browse");
        browseAnnotationFileButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                browseAnnotationFileButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 6;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        PostCiriDataPanel.add(browseAnnotationFileButton, gridBagConstraints);

        cancelAnnotationFileButton.setText("Cancel");
        cancelAnnotationFileButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelAnnotationFileButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 8;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        PostCiriDataPanel.add(cancelAnnotationFileButton, gridBagConstraints);

        jLabel5.setText("Scratch folder:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        PostCiriDataPanel.add(jLabel5, gridBagConstraints);

        scratchFolderTextField.setEditable(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 0.3;
        PostCiriDataPanel.add(scratchFolderTextField, gridBagConstraints);

        browseScratchFolderButton1.setText("Browse");
        browseScratchFolderButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                browseScratchFolderButton1ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 6;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        PostCiriDataPanel.add(browseScratchFolderButton1, gridBagConstraints);

        cancelScratchFolderButton1.setText("Cancel");
        cancelScratchFolderButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelScratchFolderButton1ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 8;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        PostCiriDataPanel.add(cancelScratchFolderButton1, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.ipadx = 194;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        StructurePanel.add(PostCiriDataPanel, gridBagConstraints);

        closeFormPostProcessingButton.setText("Close");
        closeFormPostProcessingButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeFormPostProcessingButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_END;
        gridBagConstraints.weightx = 0.2;
        gridBagConstraints.weighty = 0.1;
        StructurePanel.add(closeFormPostProcessingButton, gridBagConstraints);

        executeFormPostProcessingButton.setText("Execute");
        executeFormPostProcessingButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                executeFormPostProcessingButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_END;
        gridBagConstraints.weighty = 0.1;
        StructurePanel.add(executeFormPostProcessingButton, gridBagConstraints);

        resetFormPostProcessingButton.setText("Reset");
        resetFormPostProcessingButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetFormPostProcessingButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_END;
        gridBagConstraints.weighty = 0.1;
        StructurePanel.add(resetFormPostProcessingButton, gridBagConstraints);

        ExecutionPanel.setBackground(new java.awt.Color(248, 248, 248));
        ExecutionPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        ExecutionPanel.setToolTipText(null);
        ExecutionPanel.setLayout(new java.awt.GridBagLayout());

        jLabel149.setText("Execution:");
        jLabel149.setToolTipText(null);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.BASELINE_LEADING;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        ExecutionPanel.add(jLabel149, gridBagConstraints);

        SudoRadioButton.setBackground(new java.awt.Color(248, 248, 248));
        executionGroup.add(SudoRadioButton);
        SudoRadioButton.setText("sudo");
        SudoRadioButton.setToolTipText(null);
        SudoRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SudoRadioButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.BASELINE_LEADING;
        gridBagConstraints.insets = new java.awt.Insets(10, 95, 10, 10);
        ExecutionPanel.add(SudoRadioButton, gridBagConstraints);

        DockerRadioButton.setBackground(new java.awt.Color(248, 248, 248));
        executionGroup.add(DockerRadioButton);
        DockerRadioButton.setSelected(true);
        DockerRadioButton.setText("docker");
        DockerRadioButton.setToolTipText(null);
        DockerRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DockerRadioButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.BASELINE_LEADING;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        ExecutionPanel.add(DockerRadioButton, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        StructurePanel.add(ExecutionPanel, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(93, 0, 94, 0);
        add(StructurePanel, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

    private void browseAlignmentDataButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_browseAlignmentDataButtonActionPerformed
        JFileChooser openDir = new JFileChooser();

        if (!(alignmentDataTextField.getText().equals(""))){
            File file =new File(alignmentDataTextField.getText());
            if (file.isDirectory())
            openDir.setCurrentDirectory(file);
        }
        else {
            String curDir = MainFrame.getPreferences().get("open-dir", null);
            openDir.setCurrentDirectory(curDir!=null ? new File(curDir) : null);
        }

        openDir.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);

        if (openDir.showOpenDialog(this)==JFileChooser.APPROVE_OPTION) {
            File f = openDir.getSelectedFile();
            alignmentDataTextField.setText(String.valueOf(f));
        }
        MainFrame.getPreferences().put("open-dir",openDir.getCurrentDirectory().getAbsolutePath());
    }//GEN-LAST:event_browseAlignmentDataButtonActionPerformed

    private void cancelAlignmentDataButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelAlignmentDataButtonActionPerformed
        alignmentDataTextField.setText("");
    }//GEN-LAST:event_cancelAlignmentDataButtonActionPerformed

    private void browseReferenceButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_browseReferenceButtonActionPerformed
        JFileChooser openDir = new JFileChooser();

        if (!(referencePathTextField.getText().equals(""))){
            File file =new File(referencePathTextField.getText());
            if (file.isDirectory())
            openDir.setCurrentDirectory(file);
        }
        else {
            String curDir = MainFrame.getPreferences().get("open-dir", null);
            openDir.setCurrentDirectory(curDir!=null ? new File(curDir) : null);
        }

        openDir.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);

        if (openDir.showOpenDialog(this)==JFileChooser.APPROVE_OPTION) {
            File f = openDir.getSelectedFile();
            referencePathTextField.setText(String.valueOf(f));
        }
        MainFrame.getPreferences().put("open-dir",openDir.getCurrentDirectory().getAbsolutePath());
    }//GEN-LAST:event_browseReferenceButtonActionPerformed

    private void cancelReferenceButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelReferenceButtonActionPerformed
        referencePathTextField.setText("");
    }//GEN-LAST:event_cancelReferenceButtonActionPerformed

    private void browseCircrnaDataButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_browseCircrnaDataButtonActionPerformed
        JFileChooser openDir = new JFileChooser();

        if (!(circrnaDataTextField.getText().equals(""))){
            File file =new File(circrnaDataTextField.getText());
            if (file.isDirectory())
            openDir.setCurrentDirectory(file);
        }
        else {
            String curDir = MainFrame.getPreferences().get("open-dir", null);
            openDir.setCurrentDirectory(curDir!=null ? new File(curDir) : null);
        }

        openDir.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);

        if (openDir.showOpenDialog(this)==JFileChooser.APPROVE_OPTION) {
            File f = openDir.getSelectedFile();
            circrnaDataTextField.setText(String.valueOf(f));
        }
        MainFrame.getPreferences().put("open-dir",openDir.getCurrentDirectory().getAbsolutePath());
    }//GEN-LAST:event_browseCircrnaDataButtonActionPerformed

    private void cancelCircrnaDataButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelCircrnaDataButtonActionPerformed
        circrnaDataTextField.setText("");
    }//GEN-LAST:event_cancelCircrnaDataButtonActionPerformed

    private void closeFormPostProcessingButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeFormPostProcessingButtonActionPerformed
        CardLayout card = (CardLayout)MainFrame.MainPanel.getLayout();
        card.show(MainFrame.MainPanel, "Empty");
        MainFrame.CurrentLayout="Empty";

        resetFormPostProcessingButtonActionPerformed(evt);
    }//GEN-LAST:event_closeFormPostProcessingButtonActionPerformed

    private void resetFormPostProcessingButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetFormPostProcessingButtonActionPerformed
        circrnaDataTextField.setText("");
        referencePathTextField.setText("");
        alignmentDataTextField.setText("");
        annotationDataTextField.setText("");
        scratchFolderTextField.setText("");
    }//GEN-LAST:event_resetFormPostProcessingButtonActionPerformed

    private void executeFormPostProcessingButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_executeFormPostProcessingButtonActionPerformed
        String execution = DockerRadioButton.isSelected() ? "docker" : "sudo";
        String alignmentPath = alignmentDataTextField.getText(), 
               circrnaPath = circrnaDataTextField.getText(), 
               referencePath = referencePathTextField.getText(), 
               scratchFolder = scratchFolderTextField.getText(), 
               annotationPath = annotationDataTextField.getText();
        
        if (alignmentPath.isEmpty()) {
            JOptionPane.showMessageDialog(this, 
                "You have to specify the SAM/BAM data file.",
                "Error: alignment data", 
                JOptionPane.ERROR_MESSAGE);
            return; 
        }
        else if (!alignmentPath.endsWith(".bam") && !alignmentPath.endsWith(".sam")) {
            JOptionPane.showMessageDialog(this, 
                "You have to specify the SAM/BAM data file.",
                "Error: alignment data", 
                JOptionPane.ERROR_MESSAGE);
            return; 
        }
        
        if (circrnaPath.isEmpty()) {
            JOptionPane.showMessageDialog(this, 
                "You have to specify the CircRNA data file.",
                "Error: CircRNA data", 
                JOptionPane.ERROR_MESSAGE);
            return; 
        }
        if (referencePath.isEmpty()) {
            JOptionPane.showMessageDialog(this, 
                "You have to specify the reference file.",
                "Error: reference data", 
                JOptionPane.ERROR_MESSAGE);
            return; 
        }
        if (!annotationPath.isEmpty() && !annotationPath.endsWith(".gtf") && !annotationPath.endsWith(".gff")) {
            JOptionPane.showMessageDialog(this, 
                "The annotation file must be a GTF/GFF file.",
                "Error: annotation file", 
                JOptionPane.ERROR_MESSAGE);
            return;
        }
        if (scratchFolder.isEmpty()) {
            JOptionPane.showMessageDialog(this, 
                "You have to specify the scratch folder.",
                "Error: scratch folder", 
                JOptionPane.ERROR_MESSAGE);
            return; 
        }
              
        
        String annotation = annotationPath.isEmpty() ? "NA" : String.format("'%s'", annotationPath);
        String command = String.format(
            "group='%s' scratch.folder='%s' sam.file='%s' " + 
            "ciri.file='%s' genome.file='%s' annotation.file=%s", 
            execution, scratchFolder, alignmentPath, 
            circrnaPath, referencePath, annotation)
                .replace("'", "\\\"");; 
        
        Path p = Paths.get(circrnaPath);
        Path folder = p.getParent();
        
        MainFrame.execCommand(this, 
            "CircRNA structure prediction", 
            "execCircRNAStructure.sh", 
            command, 
            folder.toString());        
    }//GEN-LAST:event_executeFormPostProcessingButtonActionPerformed

    private void SudoRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SudoRadioButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_SudoRadioButtonActionPerformed

    private void DockerRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DockerRadioButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_DockerRadioButtonActionPerformed

    private void browseAnnotationFileButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_browseAnnotationFileButtonActionPerformed
        JFileChooser openDir = new JFileChooser();

        if (!(annotationDataTextField.getText().equals(""))){
            File file =new File(annotationDataTextField.getText());
            if (file.isDirectory())
            openDir.setCurrentDirectory(file);
        }
        else {
            String curDir = MainFrame.getPreferences().get("open-dir", null);
            openDir.setCurrentDirectory(curDir!=null ? new File(curDir) : null);
        }

        openDir.setFileSelectionMode(JFileChooser.FILES_ONLY);

        if (openDir.showOpenDialog(this)==JFileChooser.APPROVE_OPTION) {
            File f = openDir.getSelectedFile();
            annotationDataTextField.setText(String.valueOf(f));
        }
        MainFrame.getPreferences().put("open-dir",openDir.getCurrentDirectory().getAbsolutePath());
    }//GEN-LAST:event_browseAnnotationFileButtonActionPerformed

    private void cancelAnnotationFileButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelAnnotationFileButtonActionPerformed
        annotationDataTextField.setText("");
    }//GEN-LAST:event_cancelAnnotationFileButtonActionPerformed

    private void browseScratchFolderButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_browseScratchFolderButton1ActionPerformed
        JFileChooser openDir = new JFileChooser();

        if (!(scratchFolderTextField.getText().equals(""))){
            File file =new File(scratchFolderTextField.getText());
            if (file.isDirectory())
            openDir.setCurrentDirectory(file);
        }
        else {
            String curDir = MainFrame.getPreferences().get("open-dir", null);
            openDir.setCurrentDirectory(curDir!=null ? new File(curDir) : null);
        }

        openDir.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);

        if (openDir.showOpenDialog(this)==JFileChooser.APPROVE_OPTION) {
            File f = openDir.getSelectedFile();
            scratchFolderTextField.setText(String.valueOf(f));
        }
        MainFrame.getPreferences().put("open-dir",openDir.getCurrentDirectory().getAbsolutePath());
    }//GEN-LAST:event_browseScratchFolderButton1ActionPerformed

    private void cancelScratchFolderButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelScratchFolderButton1ActionPerformed
        scratchFolderTextField.setText("");
    }//GEN-LAST:event_cancelScratchFolderButton1ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JRadioButton DockerRadioButton;
    private javax.swing.JPanel ExecutionPanel;
    private javax.swing.JPanel PostCiriDataPanel;
    private javax.swing.JPanel StructurePanel;
    private javax.swing.JRadioButton SudoRadioButton;
    private javax.swing.JTextField alignmentDataTextField;
    private javax.swing.JTextField annotationDataTextField;
    private javax.swing.JButton browseAlignmentDataButton;
    private javax.swing.JButton browseAnnotationFileButton;
    private javax.swing.JButton browseCircrnaDataButton;
    private javax.swing.JButton browseReferenceButton;
    private javax.swing.JButton browseScratchFolderButton1;
    private javax.swing.JButton cancelAlignmentDataButton;
    private javax.swing.JButton cancelAnnotationFileButton;
    private javax.swing.JButton cancelCircrnaDataButton;
    private javax.swing.JButton cancelReferenceButton;
    private javax.swing.JButton cancelScratchFolderButton1;
    private javax.swing.JTextField circrnaDataTextField;
    private javax.swing.JButton closeFormPostProcessingButton;
    private javax.swing.JButton executeFormPostProcessingButton;
    private javax.swing.ButtonGroup executionGroup;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel149;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JTextField referencePathTextField;
    private javax.swing.JButton resetFormPostProcessingButton;
    private javax.swing.JTextField scratchFolderTextField;
    // End of variables declaration//GEN-END:variables
}
