/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package pkg4seqgui;

import java.nio.file.Paths;
import javax.swing.JFileChooser;

/**
 *
 * @author Nicola Licheri
 */
public class S_AutoencoderWrapper extends javax.swing.JPanel {
    private static final long serialVersionUID = 77766633335L;
    /**
     * Creates new form S_AutoencoderWrapper
     */
    public S_AutoencoderWrapper() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        executionGroup = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        fileParameters = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        inputFileTextField = new javax.swing.JTextField();
        browseInputFile = new javax.swing.JButton();
        cancelFile = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        scratchFolderTextField = new javax.swing.JTextField();
        browseScratch = new javax.swing.JButton();
        cancelScratch = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        projectNameTextField = new javax.swing.JTextField();
        cancelProjectName = new javax.swing.JButton();
        biasFileTextField = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        browseBiasFile = new javax.swing.JButton();
        cancelBiasFile = new javax.swing.JButton();
        jLabel10 = new javax.swing.JLabel();
        clusteringOutFileTextField = new javax.swing.JTextField();
        browseClusteringOutputFile = new javax.swing.JButton();
        cancelClusteringOutputFile = new javax.swing.JButton();
        executionParameters = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        sudoButton = new javax.swing.JRadioButton();
        dockerButton = new javax.swing.JRadioButton();
        closeButton = new javax.swing.JButton();
        resetButton = new javax.swing.JButton();
        executeButton = new javax.swing.JButton();
        clusteringParams = new javax.swing.JPanel();
        jLabel15 = new javax.swing.JLabel();
        clusterMethodComboBox = new javax.swing.JComboBox<>();
        jLabel16 = new javax.swing.JLabel();
        nPermAtTimeTextField = new javax.swing.JTextField();
        jLabel17 = new javax.swing.JLabel();
        pcaDimensionsTextField = new javax.swing.JTextField();
        largeScaleCheckBox = new javax.swing.JCheckBox();
        sharedParams = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        nClustersTextField = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        seedTextField = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        separatorComboBox = new javax.swing.JComboBox<>();
        cometParams = new javax.swing.JPanel();
        jLabel18 = new javax.swing.JLabel();
        nthreadsTextField = new javax.swing.JTextField();
        jLabel19 = new javax.swing.JLabel();
        xValueCometTextField = new javax.swing.JTextField();
        jLabel20 = new javax.swing.JLabel();
        kValueComboBox = new javax.swing.JComboBox<>();
        countsCheckBox = new javax.swing.JCheckBox();
        skipVisCheckBox = new javax.swing.JCheckBox();
        autoencoderParams = new javax.swing.JPanel();
        variationalCheckBox = new javax.swing.JCheckBox();
        jLabel14 = new javax.swing.JLabel();
        regularizationTextField = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        biasComboBox = new javax.swing.JComboBox<>();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        nPermutationsTextField = new javax.swing.JTextField();
        patienceTextField = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        numEpochsTextField = new javax.swing.JTextField();
        analysisParams = new javax.swing.JPanel();
        jLabel21 = new javax.swing.JLabel();
        spTextField = new javax.swing.JTextField();

        setLayout(new java.awt.GridBagLayout());

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEmptyBorder(30, 1, 1, 1), "Wrapper Autoencoder", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 1, 14), new java.awt.Color(255, 102, 0))); // NOI18N
        jPanel1.setLayout(new java.awt.GridBagLayout());

        fileParameters.setBackground(new java.awt.Color(248, 248, 248));
        fileParameters.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        fileParameters.setLayout(new java.awt.GridBagLayout());

        jLabel2.setText("Input file:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        fileParameters.add(jLabel2, gridBagConstraints);

        inputFileTextField.setEditable(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 0.3;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        fileParameters.add(inputFileTextField, gridBagConstraints);

        browseInputFile.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pkg4seqgui/images/fileb.png"))); // NOI18N
        browseInputFile.setText("Browse");
        browseInputFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                browseInputFileActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        fileParameters.add(browseInputFile, gridBagConstraints);

        cancelFile.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pkg4seqgui/images/33b.png"))); // NOI18N
        cancelFile.setText("Cancel");
        cancelFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelFileActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        fileParameters.add(cancelFile, gridBagConstraints);

        jLabel3.setText("Scratch folder: ");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        fileParameters.add(jLabel3, gridBagConstraints);

        scratchFolderTextField.setEditable(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 0.3;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        fileParameters.add(scratchFolderTextField, gridBagConstraints);

        browseScratch.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pkg4seqgui/images/52b.png"))); // NOI18N
        browseScratch.setText("Browse");
        browseScratch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                browseScratchActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        fileParameters.add(browseScratch, gridBagConstraints);

        cancelScratch.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pkg4seqgui/images/33b.png"))); // NOI18N
        cancelScratch.setText("Cancel");
        cancelScratch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelScratchActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        fileParameters.add(cancelScratch, gridBagConstraints);

        jLabel4.setText("Project name: ");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        fileParameters.add(jLabel4, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 0.3;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        fileParameters.add(projectNameTextField, gridBagConstraints);

        cancelProjectName.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pkg4seqgui/images/33b.png"))); // NOI18N
        cancelProjectName.setText("Cancel");
        cancelProjectName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelProjectNameActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        fileParameters.add(cancelProjectName, gridBagConstraints);

        biasFileTextField.setEditable(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 0.3;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        fileParameters.add(biasFileTextField, gridBagConstraints);

        jLabel9.setText("Bias file:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        fileParameters.add(jLabel9, gridBagConstraints);

        browseBiasFile.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pkg4seqgui/images/fileb.png"))); // NOI18N
        browseBiasFile.setText("Browse");
        browseBiasFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                browseBiasFileActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        fileParameters.add(browseBiasFile, gridBagConstraints);

        cancelBiasFile.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pkg4seqgui/images/33b.png"))); // NOI18N
        cancelBiasFile.setText("Cancel");
        cancelBiasFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelBiasFileActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        fileParameters.add(cancelBiasFile, gridBagConstraints);

        jLabel10.setText("Clustering file:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        fileParameters.add(jLabel10, gridBagConstraints);

        clusteringOutFileTextField.setEditable(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 0.3;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        fileParameters.add(clusteringOutFileTextField, gridBagConstraints);

        browseClusteringOutputFile.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pkg4seqgui/images/fileb.png"))); // NOI18N
        browseClusteringOutputFile.setText("Browse");
        browseClusteringOutputFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                browseClusteringOutputFileActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        fileParameters.add(browseClusteringOutputFile, gridBagConstraints);

        cancelClusteringOutputFile.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pkg4seqgui/images/33b.png"))); // NOI18N
        cancelClusteringOutputFile.setText("Cancel");
        cancelClusteringOutputFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelClusteringOutputFileActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        fileParameters.add(cancelClusteringOutputFile, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        jPanel1.add(fileParameters, gridBagConstraints);

        executionParameters.setBackground(new java.awt.Color(248, 248, 248));
        executionParameters.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        executionParameters.setLayout(new java.awt.GridBagLayout());

        jLabel7.setText("Execution:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        executionParameters.add(jLabel7, gridBagConstraints);

        executionGroup.add(sudoButton);
        sudoButton.setText("sudo");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        executionParameters.add(sudoButton, gridBagConstraints);

        executionGroup.add(dockerButton);
        dockerButton.setSelected(true);
        dockerButton.setText("docker");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        executionParameters.add(dockerButton, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        jPanel1.add(executionParameters, gridBagConstraints);

        closeButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pkg4seqgui/images/close.png"))); // NOI18N
        closeButton.setText("Close");
        closeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_END;
        gridBagConstraints.weighty = 3.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        jPanel1.add(closeButton, gridBagConstraints);

        resetButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pkg4seqgui/images/reset.png"))); // NOI18N
        resetButton.setText("Reset");
        resetButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_END;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        jPanel1.add(resetButton, gridBagConstraints);

        executeButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pkg4seqgui/images/exec.png"))); // NOI18N
        executeButton.setText("Execute");
        executeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                executeButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_END;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        jPanel1.add(executeButton, gridBagConstraints);

        clusteringParams.setBackground(new java.awt.Color(248, 248, 248));
        clusteringParams.setBorder(javax.swing.BorderFactory.createTitledBorder("Clustering parameters"));
        clusteringParams.setLayout(new java.awt.GridBagLayout());

        jLabel15.setText("Clustering method:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        clusteringParams.add(jLabel15, gridBagConstraints);

        clusterMethodComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "GRIPH", "SIMLR", "SEURAT", "SHARP" }));
        clusterMethodComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clusterMethodComboBoxActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 0.3;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        clusteringParams.add(clusterMethodComboBox, gridBagConstraints);

        jLabel16.setText("Num. perm. at time:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        clusteringParams.add(jLabel16, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.weightx = 0.3;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        clusteringParams.add(nPermAtTimeTextField, gridBagConstraints);

        jLabel17.setText("PCA dimension:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        clusteringParams.add(jLabel17, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.weightx = 0.3;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        clusteringParams.add(pcaDimensionsTextField, gridBagConstraints);

        largeScaleCheckBox.setText("Large scale");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        clusteringParams.add(largeScaleCheckBox, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        jPanel1.add(clusteringParams, gridBagConstraints);

        sharedParams.setBackground(new java.awt.Color(248, 248, 248));
        sharedParams.setBorder(javax.swing.BorderFactory.createTitledBorder("General parameters"));
        sharedParams.setLayout(new java.awt.GridBagLayout());

        jLabel5.setText("Num. clusters: ");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        sharedParams.add(jLabel5, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 0.3;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        sharedParams.add(nClustersTextField, gridBagConstraints);

        jLabel1.setText("Random seed:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        sharedParams.add(jLabel1, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.weightx = 0.3;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        sharedParams.add(seedTextField, gridBagConstraints);

        jLabel6.setText("Separator:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        sharedParams.add(jLabel6, gridBagConstraints);

        separatorComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "TAB", "COMMA" }));
        separatorComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                separatorComboBoxActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        sharedParams.add(separatorComboBox, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        jPanel1.add(sharedParams, gridBagConstraints);

        cometParams.setBackground(new java.awt.Color(248, 248, 248));
        cometParams.setBorder(javax.swing.BorderFactory.createTitledBorder("Comet Parameters"));
        cometParams.setLayout(new java.awt.GridBagLayout());

        jLabel18.setText("Num. threads:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        cometParams.add(jLabel18, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 0.45;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        cometParams.add(nthreadsTextField, gridBagConstraints);

        jLabel19.setText("X:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        cometParams.add(jLabel19, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 0.3;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        cometParams.add(xValueCometTextField, gridBagConstraints);

        jLabel20.setText("K:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        cometParams.add(jLabel20, gridBagConstraints);

        kValueComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "2", "3", "4" }));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 0.3;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        cometParams.add(kValueComboBox, gridBagConstraints);

        countsCheckBox.setText("Counts");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        cometParams.add(countsCheckBox, gridBagConstraints);

        skipVisCheckBox.setText("Skip Visualization");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 6;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        cometParams.add(skipVisCheckBox, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        jPanel1.add(cometParams, gridBagConstraints);

        autoencoderParams.setBackground(new java.awt.Color(248, 248, 248));
        autoencoderParams.setBorder(javax.swing.BorderFactory.createTitledBorder("Autoencoder parameters"));
        autoencoderParams.setLayout(new java.awt.GridBagLayout());

        variationalCheckBox.setText("Variational AE");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        autoencoderParams.add(variationalCheckBox, gridBagConstraints);

        jLabel14.setText("Regularization:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        autoencoderParams.add(jLabel14, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.weightx = 0.3;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        autoencoderParams.add(regularizationTextField, gridBagConstraints);

        jLabel11.setText("Bias:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        autoencoderParams.add(jLabel11, gridBagConstraints);

        biasComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "miRNA", "TF", "CUSTOM", "kinasi", "immunoSignature" }));
        biasComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                biasComboBoxActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        autoencoderParams.add(biasComboBox, gridBagConstraints);

        jLabel12.setText("% patience epochs:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        autoencoderParams.add(jLabel12, gridBagConstraints);

        jLabel13.setText("Num. permutations:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        autoencoderParams.add(jLabel13, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.weightx = 0.3;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        autoencoderParams.add(nPermutationsTextField, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.weightx = 0.3;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        autoencoderParams.add(patienceTextField, gridBagConstraints);

        jLabel8.setText("Num. epochs:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        autoencoderParams.add(jLabel8, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.weightx = 0.3;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        autoencoderParams.add(numEpochsTextField, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        jPanel1.add(autoencoderParams, gridBagConstraints);

        analysisParams.setBackground(new java.awt.Color(248, 248, 248));
        analysisParams.setBorder(javax.swing.BorderFactory.createTitledBorder("Analysis Parameters"));
        analysisParams.setLayout(new java.awt.GridBagLayout());

        jLabel21.setText("Sp threshold:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        analysisParams.add(jLabel21, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 0.3;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        analysisParams.add(spTextField, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        jPanel1.add(analysisParams, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        add(jPanel1, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

    private void browseInputFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_browseInputFileActionPerformed
        MainFrame.browseTextFieldContent(this, inputFileTextField, JFileChooser.FILES_ONLY);
    }//GEN-LAST:event_browseInputFileActionPerformed

    private void cancelFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelFileActionPerformed
        inputFileTextField.setText("");
    }//GEN-LAST:event_cancelFileActionPerformed

    private void browseScratchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_browseScratchActionPerformed
        MainFrame.browseTextFieldContent(this, scratchFolderTextField, JFileChooser.DIRECTORIES_ONLY);
    }//GEN-LAST:event_browseScratchActionPerformed

    private void cancelScratchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelScratchActionPerformed
        scratchFolderTextField.setText("");
    }//GEN-LAST:event_cancelScratchActionPerformed

    private void cancelProjectNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelProjectNameActionPerformed
        projectNameTextField.setText("");
    }//GEN-LAST:event_cancelProjectNameActionPerformed

    private void browseBiasFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_browseBiasFileActionPerformed
        MainFrame.browseTextFieldContent(this, biasFileTextField, JFileChooser.FILES_ONLY);
    }//GEN-LAST:event_browseBiasFileActionPerformed

    private void cancelBiasFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelBiasFileActionPerformed
        biasFileTextField.setText("");
    }//GEN-LAST:event_cancelBiasFileActionPerformed

    private void browseClusteringOutputFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_browseClusteringOutputFileActionPerformed
        MainFrame.browseTextFieldContent(this, clusteringOutFileTextField, JFileChooser.FILES_ONLY);
    }//GEN-LAST:event_browseClusteringOutputFileActionPerformed

    private void cancelClusteringOutputFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelClusteringOutputFileActionPerformed
        clusteringOutFileTextField.setText("");
    }//GEN-LAST:event_cancelClusteringOutputFileActionPerformed

    private void closeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeButtonActionPerformed
        resetButtonActionPerformed(evt);
        MainFrame.setCard(null);
    }//GEN-LAST:event_closeButtonActionPerformed

    private void resetButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetButtonActionPerformed
        dockerButton.setSelected(true);
        inputFileTextField.setText("");
        scratchFolderTextField.setText("");
        biasFileTextField.setText("");
        clusteringOutFileTextField.setText("");
        projectNameTextField.setText("");
        
        nClustersTextField.setText("");
        seedTextField.setText("");
        separatorComboBox.setSelectedIndex(0);
        
        nPermutationsTextField.setText("");
        numEpochsTextField.setText("");
        patienceTextField.setText("");
        biasComboBox.setSelectedIndex(0);
        regularizationTextField.setText("");
        variationalCheckBox.setSelected(false);
        
        clusterMethodComboBox.setSelectedIndex(0);
        pcaDimensionsTextField.setText("");
        nPermAtTimeTextField.setText("");
        largeScaleCheckBox.setSelected(false);
        spTextField.setText("");
        
        nthreadsTextField.setText("");
        kValueComboBox.setSelectedIndex(0);
        xValueCometTextField.setText("");
        countsCheckBox.setSelected(false);
        skipVisCheckBox.setSelected(false);        
    }//GEN-LAST:event_resetButtonActionPerformed

    private void executeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_executeButtonActionPerformed
        String inputFile = inputFileTextField.getText(),
        scratchFolder = scratchFolderTextField.getText(),
        biasFile = biasFileTextField.getText(),
        outputFile = clusteringOutFileTextField.getText(),
        projectName = projectNameTextField.getText();

        if (biasFile.isEmpty())
            biasFile = "NULL";

        if (MainFrame.checkPath(this, inputFile, "input file") ||
            MainFrame.checkPath(this, scratchFolder, "scratch folder") ||
            MainFrame.checkPath(this, outputFile, "clustering output file") ||
            MainFrame.checkPath(this, projectName, "name of the project")) return;

        Integer nclusters, nperm, nepochs, npatience, seed, regularization;

        if ((nclusters = MainFrame.checkIntValue(this, nClustersTextField.getText(), "number of clusters")) == null ||
            (nperm = MainFrame.checkIntValue(this, nPermutationsTextField.getText(), "number of permutations")) == null ||
            (nepochs = MainFrame.checkIntValue(this, numEpochsTextField.getText(), "number of epochs")) == null ||
            (npatience = MainFrame.checkIntValue(this, patienceTextField.getText(), "percentage of epochs of non-training")) == null ||
            (seed = MainFrame.checkIntValue(this, seedTextField.getText(), "random seed value")) == null ||
            (regularization = MainFrame.checkIntValue(this, regularizationTextField.getText(), "regulator value")) == null) return;
        
        Integer pcaDim, nPerm, nthreads; 
        Float xValue, sp; 
        
        if ((pcaDim = MainFrame.checkIntValue(this, pcaDimensionsTextField.getText(), "number of PCA dimensions")) == null ||
            (nPerm = MainFrame.checkIntValue(this, nPermAtTimeTextField.getText(), "number of parallel permutations")) == null ||
            (nthreads = MainFrame.checkIntValue(this, nthreadsTextField.getText(), "number of threads to use")) == null ||
            (xValue = MainFrame.checkFloatValue(this, xValueCometTextField.getText(), "x value")) == null ||
            (sp = MainFrame.checkFloatValue(this, spTextField.getText(), "sp thresold")) == null)
            return; 
        
        int kValue = MainFrame.checkIntValue(this, kValueComboBox.getSelectedItem().toString(), "k"); 

        String outputFolder = Paths.get(inputFile).getParent().toString();
        ScriptCaller params = new ScriptCaller("autowrapper.R", outputFolder)
            .addArg("group", sudoButton.isSelected() ? "sudo" : "docker")
            .addArg("projectName", projectName)
            .addArg("scratch.folder", scratchFolder)
            .addArg("file", inputFile)
            .addArg("cl", outputFile)
            .addArg("bN", biasFile)
            .addArg("permutation", nperm)
            .addArg("nCluster", nclusters)
            .addArg("nEpochs", nepochs)
            .addArg("patiencePercentage", npatience)
            .addArg("separator", separatorComboBox.getSelectedItem().toString())
            .addArg("bias", biasComboBox.getSelectedItem().toString())
            .addArg("seed", seed)
            .addArg("regularization", regularization)
            .addArg("variational", variationalCheckBox.isSelected())
            .addArg("pcaDimension", pcaDim)
            .addArg("clusterMethod", clusterMethodComboBox.getSelectedItem().toString())
            .addArg("permAtTime", nPerm)
            .addArg("largeScale", largeScaleCheckBox.isSelected())
            .addArg("X", xValue)
            .addArg("K", kValue)
            .addArg("counts", countsCheckBox.isSelected())
            .addArg("skipvis", skipVisCheckBox.isSelected())
            .addArg("threads", nthreads)
            .addArg("Sp", sp);
        MainFrame.execCommand(this, "Wrapper autoencoder", params);
    }//GEN-LAST:event_executeButtonActionPerformed

    private void separatorComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_separatorComboBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_separatorComboBoxActionPerformed

    private void biasComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_biasComboBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_biasComboBoxActionPerformed

    private void clusterMethodComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clusterMethodComboBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_clusterMethodComboBoxActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel analysisParams;
    private javax.swing.JPanel autoencoderParams;
    private javax.swing.JComboBox<String> biasComboBox;
    private javax.swing.JTextField biasFileTextField;
    private javax.swing.JButton browseBiasFile;
    private javax.swing.JButton browseClusteringOutputFile;
    private javax.swing.JButton browseInputFile;
    private javax.swing.JButton browseScratch;
    private javax.swing.JButton cancelBiasFile;
    private javax.swing.JButton cancelClusteringOutputFile;
    private javax.swing.JButton cancelFile;
    private javax.swing.JButton cancelProjectName;
    private javax.swing.JButton cancelScratch;
    private javax.swing.JButton closeButton;
    private javax.swing.JComboBox<String> clusterMethodComboBox;
    private javax.swing.JTextField clusteringOutFileTextField;
    private javax.swing.JPanel clusteringParams;
    private javax.swing.JPanel cometParams;
    private javax.swing.JCheckBox countsCheckBox;
    private javax.swing.JRadioButton dockerButton;
    private javax.swing.JButton executeButton;
    private javax.swing.ButtonGroup executionGroup;
    private javax.swing.JPanel executionParameters;
    private javax.swing.JPanel fileParameters;
    private javax.swing.JTextField inputFileTextField;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JComboBox<String> kValueComboBox;
    private javax.swing.JCheckBox largeScaleCheckBox;
    private javax.swing.JTextField nClustersTextField;
    private javax.swing.JTextField nPermAtTimeTextField;
    private javax.swing.JTextField nPermutationsTextField;
    private javax.swing.JTextField nthreadsTextField;
    private javax.swing.JTextField numEpochsTextField;
    private javax.swing.JTextField patienceTextField;
    private javax.swing.JTextField pcaDimensionsTextField;
    private javax.swing.JTextField projectNameTextField;
    private javax.swing.JTextField regularizationTextField;
    private javax.swing.JButton resetButton;
    private javax.swing.JTextField scratchFolderTextField;
    private javax.swing.JTextField seedTextField;
    private javax.swing.JComboBox<String> separatorComboBox;
    private javax.swing.JPanel sharedParams;
    private javax.swing.JCheckBox skipVisCheckBox;
    private javax.swing.JTextField spTextField;
    private javax.swing.JRadioButton sudoButton;
    private javax.swing.JCheckBox variationalCheckBox;
    private javax.swing.JTextField xValueCometTextField;
    // End of variables declaration//GEN-END:variables
}
