/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package pkg4seqgui;

import java.awt.CardLayout;
import java.io.File;
import java.nio.file.Paths;
import java.nio.file.Path;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;

/**
 *
 * @author Nicola Licheri
 */
public class CircRNAStarPrediction extends javax.swing.JPanel {
    private static final long serialVersionUID = 9778212340L;
    /**
     * Creates new form CircRNAStarPrediction
     */
    public CircRNAStarPrediction() {
        initComponents();
        numThreadsTextField.setText(Integer.toString(MainFrame.GS.getDefaultThread()));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        executionGroup = new javax.swing.ButtonGroup();
        starPredictionPanel = new javax.swing.JPanel();
        ExecutionPanel = new javax.swing.JPanel();
        jLabel144 = new javax.swing.JLabel();
        SudoRadioButton = new javax.swing.JRadioButton();
        DockerRadioButton = new javax.swing.JRadioButton();
        jLabel5 = new javax.swing.JLabel();
        numThreadsTextField = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        IOFilesPanel = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        samplesFolderTextField = new javax.swing.JTextField();
        genomeFolderTextField = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        scratchFolderTextField = new javax.swing.JTextField();
        browseScratchFolderButton1 = new javax.swing.JButton();
        cancelScratchFolderButton1 = new javax.swing.JButton();
        browseGenomeFolderTextField = new javax.swing.JButton();
        cancelGenomeFolderTextField = new javax.swing.JButton();
        browseFastqFolderButton = new javax.swing.JButton();
        cancelFastqFolderButton = new javax.swing.JButton();
        closeFormCircRNAStarChimericButton = new javax.swing.JButton();
        executeFormCircRNAStarChimericButton = new javax.swing.JButton();
        resetFormCircRNAStarChimericButton = new javax.swing.JButton();
        starchipCircleParametersPanel = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        readsCutoffTextField = new javax.swing.JTextField();
        cpmCutoffTextField = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        subjCPMCutoffTextField = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        minSubjLimitTextField = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        doSpliceCheckBox = new javax.swing.JCheckBox();
        annotationCheckBox = new javax.swing.JCheckBox();

        setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        setLayout(new java.awt.GridBagLayout());

        starPredictionPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEmptyBorder(30, 1, 1, 1), "STARChip CircRNA Prediction", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 1, 14), new java.awt.Color(4, 235, 164))); // NOI18N
        starPredictionPanel.setLayout(new java.awt.GridBagLayout());

        ExecutionPanel.setBackground(new java.awt.Color(248, 248, 248));
        ExecutionPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        ExecutionPanel.setToolTipText(null);
        ExecutionPanel.setLayout(new java.awt.GridBagLayout());

        jLabel144.setText("Execution:");
        jLabel144.setToolTipText(null);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.BASELINE_LEADING;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        ExecutionPanel.add(jLabel144, gridBagConstraints);

        SudoRadioButton.setBackground(new java.awt.Color(248, 248, 248));
        executionGroup.add(SudoRadioButton);
        SudoRadioButton.setText("sudo");
        SudoRadioButton.setToolTipText(null);
        SudoRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SudoRadioButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.BASELINE_LEADING;
        gridBagConstraints.insets = new java.awt.Insets(10, 15, 10, 10);
        ExecutionPanel.add(SudoRadioButton, gridBagConstraints);

        DockerRadioButton.setBackground(new java.awt.Color(248, 248, 248));
        executionGroup.add(DockerRadioButton);
        DockerRadioButton.setSelected(true);
        DockerRadioButton.setText("docker");
        DockerRadioButton.setToolTipText(null);
        DockerRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DockerRadioButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.BASELINE_LEADING;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        ExecutionPanel.add(DockerRadioButton, gridBagConstraints);

        jLabel5.setText("Num. threads: ");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.BASELINE;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        ExecutionPanel.add(jLabel5, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.BASELINE_TRAILING;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(10, 15, 10, 10);
        ExecutionPanel.add(numThreadsTextField, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.weightx = 10.0;
        ExecutionPanel.add(jLabel9, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        starPredictionPanel.add(ExecutionPanel, gridBagConstraints);

        IOFilesPanel.setBackground(new java.awt.Color(248, 248, 248));
        IOFilesPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        IOFilesPanel.setLayout(new java.awt.GridBagLayout());

        jLabel1.setText("Samples folder:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        IOFilesPanel.add(jLabel1, gridBagConstraints);

        samplesFolderTextField.setEditable(false);
        samplesFolderTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                samplesFolderTextFieldActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_END;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        IOFilesPanel.add(samplesFolderTextField, gridBagConstraints);

        genomeFolderTextField.setEditable(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_END;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        IOFilesPanel.add(genomeFolderTextField, gridBagConstraints);

        jLabel2.setText("Genome folder:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        IOFilesPanel.add(jLabel2, gridBagConstraints);

        jLabel8.setText("Scratch folder:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        IOFilesPanel.add(jLabel8, gridBagConstraints);

        scratchFolderTextField.setEditable(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 0.3;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        IOFilesPanel.add(scratchFolderTextField, gridBagConstraints);

        browseScratchFolderButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pkg4seqgui/images/52b.png"))); // NOI18N
        browseScratchFolderButton1.setText("Browse");
        browseScratchFolderButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                browseScratchFolderButton1ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        IOFilesPanel.add(browseScratchFolderButton1, gridBagConstraints);

        cancelScratchFolderButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pkg4seqgui/images/33b.png"))); // NOI18N
        cancelScratchFolderButton1.setText("Cancel");
        cancelScratchFolderButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelScratchFolderButton1ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        IOFilesPanel.add(cancelScratchFolderButton1, gridBagConstraints);

        browseGenomeFolderTextField.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pkg4seqgui/images/52b.png"))); // NOI18N
        browseGenomeFolderTextField.setText("Browse");
        browseGenomeFolderTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                browseGenomeFolderTextFieldActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        IOFilesPanel.add(browseGenomeFolderTextField, gridBagConstraints);

        cancelGenomeFolderTextField.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pkg4seqgui/images/33b.png"))); // NOI18N
        cancelGenomeFolderTextField.setText("Cancel");
        cancelGenomeFolderTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelGenomeFolderTextFieldActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        IOFilesPanel.add(cancelGenomeFolderTextField, gridBagConstraints);

        browseFastqFolderButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pkg4seqgui/images/52b.png"))); // NOI18N
        browseFastqFolderButton.setText("Browse");
        browseFastqFolderButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                browseFastqFolderButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        IOFilesPanel.add(browseFastqFolderButton, gridBagConstraints);

        cancelFastqFolderButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pkg4seqgui/images/33b.png"))); // NOI18N
        cancelFastqFolderButton.setText("Cancel");
        cancelFastqFolderButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelFastqFolderButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        IOFilesPanel.add(cancelFastqFolderButton, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        starPredictionPanel.add(IOFilesPanel, gridBagConstraints);

        closeFormCircRNAStarChimericButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pkg4seqgui/images/close.png"))); // NOI18N
        closeFormCircRNAStarChimericButton.setText("Close");
        closeFormCircRNAStarChimericButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeFormCircRNAStarChimericButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_END;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        starPredictionPanel.add(closeFormCircRNAStarChimericButton, gridBagConstraints);

        executeFormCircRNAStarChimericButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pkg4seqgui/images/exec.png"))); // NOI18N
        executeFormCircRNAStarChimericButton.setText("Execute");
        executeFormCircRNAStarChimericButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                executeFormCircRNAStarChimericButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_END;
        gridBagConstraints.weightx = 2.0;
        gridBagConstraints.weighty = 10.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        starPredictionPanel.add(executeFormCircRNAStarChimericButton, gridBagConstraints);

        resetFormCircRNAStarChimericButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pkg4seqgui/images/reset.png"))); // NOI18N
        resetFormCircRNAStarChimericButton.setText("Reset");
        resetFormCircRNAStarChimericButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetFormCircRNAStarChimericButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_END;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        starPredictionPanel.add(resetFormCircRNAStarChimericButton, gridBagConstraints);

        starchipCircleParametersPanel.setBackground(new java.awt.Color(248, 248, 248));
        starchipCircleParametersPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        starchipCircleParametersPanel.setLayout(new java.awt.GridBagLayout());

        jLabel3.setText("reads cutoff: ");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.ABOVE_BASELINE_LEADING;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 27);
        starchipCircleParametersPanel.add(jLabel3, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.ABOVE_BASELINE_LEADING;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        starchipCircleParametersPanel.add(readsCutoffTextField, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.ABOVE_BASELINE_LEADING;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        starchipCircleParametersPanel.add(cpmCutoffTextField, gridBagConstraints);

        jLabel4.setText("cpm.cutoff:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.ABOVE_BASELINE_LEADING;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 27);
        starchipCircleParametersPanel.add(jLabel4, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.ABOVE_BASELINE_LEADING;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        starchipCircleParametersPanel.add(subjCPMCutoffTextField, gridBagConstraints);

        jLabel6.setText("min.subject.limit:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.ABOVE_BASELINE_LEADING;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        starchipCircleParametersPanel.add(jLabel6, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        starchipCircleParametersPanel.add(minSubjLimitTextField, gridBagConstraints);

        jLabel7.setText("subjectCPM.cutoff");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.ABOVE_BASELINE_LEADING;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        starchipCircleParametersPanel.add(jLabel7, gridBagConstraints);

        doSpliceCheckBox.setBackground(new java.awt.Color(248, 248, 248));
        doSpliceCheckBox.setText("do.splice");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        starchipCircleParametersPanel.add(doSpliceCheckBox, gridBagConstraints);

        annotationCheckBox.setBackground(new java.awt.Color(248, 248, 248));
        annotationCheckBox.setText("annotation");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        starchipCircleParametersPanel.add(annotationCheckBox, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        starPredictionPanel.add(starchipCircleParametersPanel, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        add(starPredictionPanel, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

    private void SudoRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SudoRadioButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_SudoRadioButtonActionPerformed

    private void DockerRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DockerRadioButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_DockerRadioButtonActionPerformed

    private void samplesFolderTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_samplesFolderTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_samplesFolderTextFieldActionPerformed

    private void closeFormCircRNAStarChimericButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeFormCircRNAStarChimericButtonActionPerformed
        MainFrame.setCard(null);
        resetFormCircRNAStarChimericButtonActionPerformed(evt);
    }//GEN-LAST:event_closeFormCircRNAStarChimericButtonActionPerformed

    private void executeFormCircRNAStarChimericButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_executeFormCircRNAStarChimericButtonActionPerformed
        String execution = DockerRadioButton.isSelected() ? "docker" : "sudo";
        String genomePath = genomeFolderTextField.getText(), 
               samplesPath = samplesFolderTextField.getText(),
               scratchFolder = scratchFolderTextField.getText();
        int readsCutoff, minSubject, subjCPMCutoff, nthreads; 
        float cpmCutoff; 
        String do_splice = doSpliceCheckBox.isSelected() ? "TRUE" : "FALSE", 
                annotation = annotationCheckBox.isSelected() ? "TRUE" : "FALSE"; 

        if (genomePath.isEmpty()) {
            JOptionPane.showMessageDialog(this, 
                "You have to specify the reference genome path.",
                "Error: reference genome", 
                JOptionPane.ERROR_MESSAGE);
            return; 
        }
        if (samplesPath.isEmpty()) {
            JOptionPane.showMessageDialog(this, 
                "You have to specify the samples folder path.",
                "Error: samples folder", 
                JOptionPane.ERROR_MESSAGE);
            return; 
        }
        if (scratchFolder.isEmpty()) {
            JOptionPane.showMessageDialog(this, 
                "You have to specify the scratch folder.",
                "Error: scratch folder", 
                JOptionPane.ERROR_MESSAGE);
            return; 
        }
        
        try {
            nthreads = Integer.parseInt(numThreadsTextField.getText()); 
            
            if (nthreads <= 0) 
                throw new NumberFormatException();
        }
        catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, 
                "You have to specify a positive integer value.",
                "Error: number of threads", 
                JOptionPane.ERROR_MESSAGE);
            return; 
        }
        
        try {
            readsCutoff = Integer.parseInt(readsCutoffTextField.getText()); 
            
            if (readsCutoff <= 0) 
                throw new NumberFormatException();
        }
        catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, 
                "You have to specify a positive integer value.",
                "Error: reads cutoff", 
                JOptionPane.ERROR_MESSAGE);
            return; 
        }
        
        try {
            minSubject = Integer.parseInt(minSubjLimitTextField.getText()); 
            
            if (minSubject <= 0) 
                throw new NumberFormatException();
        }
        catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, 
                "You have to specify a positive integer value.",
                "Error: min subject limit", 
                JOptionPane.ERROR_MESSAGE);
            return; 
        }
        
        try {
            subjCPMCutoff = Integer.parseInt(subjCPMCutoffTextField.getText()); 
            
            if (subjCPMCutoff <= 0) 
                throw new NumberFormatException();
        }
        catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, 
                "You have to specify a positive integer value.",
                "Error: subjectCPM.cutoff", 
                JOptionPane.ERROR_MESSAGE);
            return; 
        }
        
        try {
           cpmCutoff = Float.parseFloat(cpmCutoffTextField.getText());
        }
        catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, 
                "You have to specify a floating point value.",
                "Error: cpm.cutoff", 
                JOptionPane.ERROR_MESSAGE);
            return; 
        }
        
        
        String command = String.format("group='%s' scratch.folder='%s' genome.folder='%s' " + 
            "samples.folder='%s' reads.cutoff=%d min.subject.limit=%d threads=%d " +
            "do.splice=%s cpm.cutoff=%f subjectCPM.cutoff=%d annotation=%s", 
             execution, scratchFolder, genomePath, samplesPath, readsCutoff, minSubject, 
             nthreads, do_splice, cpmCutoff, subjCPMCutoff, annotation)
                .replace("'", "\\\"");

        Path p = Paths.get(samplesPath);
        Path folder = p.getParent();

        MainFrame.execCommand(this, "CircRNA STAR prediction", "execCircSTARPrediction.sh", command, folder.toString());
    }//GEN-LAST:event_executeFormCircRNAStarChimericButtonActionPerformed

    private void resetFormCircRNAStarChimericButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetFormCircRNAStarChimericButtonActionPerformed
        DockerRadioButton.setSelected(true);
        numThreadsTextField.setText(Integer.toString(MainFrame.GS.getDefaultThread()));
        samplesFolderTextField.setText("");
        genomeFolderTextField.setText("");
        scratchFolderTextField.setText("");
        minSubjLimitTextField.setText("");
        numThreadsTextField.setText(""); 
        readsCutoffTextField.setText("");
        minSubjLimitTextField.setText("");
        cpmCutoffTextField.setText("");
        subjCPMCutoffTextField.setText("");
        doSpliceCheckBox.setSelected(false);
        annotationCheckBox.setSelected(false);
        
    }//GEN-LAST:event_resetFormCircRNAStarChimericButtonActionPerformed

    private void browseScratchFolderButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_browseScratchFolderButton1ActionPerformed
        MainFrame.browseTextFieldContent(this, scratchFolderTextField, JFileChooser.DIRECTORIES_ONLY);
    }//GEN-LAST:event_browseScratchFolderButton1ActionPerformed

    private void cancelScratchFolderButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelScratchFolderButton1ActionPerformed
        scratchFolderTextField.setText("");
    }//GEN-LAST:event_cancelScratchFolderButton1ActionPerformed

    private void browseGenomeFolderTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_browseGenomeFolderTextFieldActionPerformed
        MainFrame.browseTextFieldContent(this, genomeFolderTextField, JFileChooser.DIRECTORIES_ONLY);
    }//GEN-LAST:event_browseGenomeFolderTextFieldActionPerformed

    private void cancelGenomeFolderTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelGenomeFolderTextFieldActionPerformed
        genomeFolderTextField.setText("");
    }//GEN-LAST:event_cancelGenomeFolderTextFieldActionPerformed

    private void browseFastqFolderButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_browseFastqFolderButtonActionPerformed
        MainFrame.browseTextFieldContent(this, samplesFolderTextField, JFileChooser.DIRECTORIES_ONLY);
    }//GEN-LAST:event_browseFastqFolderButtonActionPerformed

    private void cancelFastqFolderButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelFastqFolderButtonActionPerformed
        samplesFolderTextField.setText("");
    }//GEN-LAST:event_cancelFastqFolderButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JRadioButton DockerRadioButton;
    private javax.swing.JPanel ExecutionPanel;
    private javax.swing.JPanel IOFilesPanel;
    private javax.swing.JRadioButton SudoRadioButton;
    private javax.swing.JCheckBox annotationCheckBox;
    private javax.swing.JButton browseFastqFolderButton;
    private javax.swing.JButton browseGenomeFolderTextField;
    private javax.swing.JButton browseScratchFolderButton1;
    private javax.swing.JButton cancelFastqFolderButton;
    private javax.swing.JButton cancelGenomeFolderTextField;
    private javax.swing.JButton cancelScratchFolderButton1;
    private javax.swing.JButton closeFormCircRNAStarChimericButton;
    private javax.swing.JTextField cpmCutoffTextField;
    private javax.swing.JCheckBox doSpliceCheckBox;
    private javax.swing.JButton executeFormCircRNAStarChimericButton;
    private javax.swing.ButtonGroup executionGroup;
    private javax.swing.JTextField genomeFolderTextField;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel144;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JTextField minSubjLimitTextField;
    private javax.swing.JTextField numThreadsTextField;
    private javax.swing.JTextField readsCutoffTextField;
    private javax.swing.JButton resetFormCircRNAStarChimericButton;
    private javax.swing.JTextField samplesFolderTextField;
    private javax.swing.JTextField scratchFolderTextField;
    private javax.swing.JPanel starPredictionPanel;
    private javax.swing.JPanel starchipCircleParametersPanel;
    private javax.swing.JTextField subjCPMCutoffTextField;
    // End of variables declaration//GEN-END:variables
}
