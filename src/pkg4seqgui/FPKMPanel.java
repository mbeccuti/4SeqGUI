/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package pkg4seqgui;

import java.awt.CardLayout;
import java.io.File;
import java.io.IOException;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import java.util.Timer;
import static pkg4seqgui.MainFrame.getPreferences;

/**
 *
 * @author user
 */
public class FPKMPanel extends javax.swing.JPanel {

    /**
     * Creates new form FPKMPanel
     */
    public FPKMPanel() {
        initComponents();

    }
private static final long serialVersionUID = 57782123317L;
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        FPKMPanel = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane6 = new javax.swing.JScrollPane();
        FPKMFileTable = new javax.swing.JTable();
        FAddFile = new javax.swing.JButton();
        jButton13 = new javax.swing.JButton();
        jLabel26 = new javax.swing.JLabel();
        FtypesComboBox = new javax.swing.JComboBox<>();
        jLabel27 = new javax.swing.JLabel();
        FOutputFolderText = new javax.swing.JTextField();
        Fbrowes = new javax.swing.JButton();
        Fcancel = new javax.swing.JButton();
        FExecuteButton = new javax.swing.JButton();
        FSaveButton = new javax.swing.JButton();
        FResetButton = new javax.swing.JButton();
        FCloseButton = new javax.swing.JButton();

        setLayout(new java.awt.GridBagLayout());

        FPKMPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEmptyBorder(30, 1, 1, 1), "From samples to experiment", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 1, 14), new java.awt.Color(102, 0, 153))); // NOI18N
        FPKMPanel.setLayout(new java.awt.GridBagLayout());

        jPanel4.setBackground(new java.awt.Color(248, 248, 248));
        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        jPanel4.setLayout(new java.awt.GridBagLayout());

        FPKMFileTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Folder", "Grouping", "Batch"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Object.class, java.lang.Object.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        FPKMFileTable.setColumnSelectionAllowed(true);
        FPKMFileTable.getTableHeader().setReorderingAllowed(false);
        jScrollPane6.setViewportView(FPKMFileTable);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        jPanel4.add(jScrollPane6, gridBagConstraints);

        FAddFile.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pkg4seqgui/images/fileb.png"))); // NOI18N
        FAddFile.setText("Add");
        FAddFile.setToolTipText("");
        FAddFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FAddFileActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.weighty = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        jPanel4.add(FAddFile, gridBagConstraints);

        jButton13.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pkg4seqgui/images/remove.png"))); // NOI18N
        jButton13.setText("Remove");
        jButton13.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton13ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        jPanel4.add(jButton13, gridBagConstraints);

        jLabel26.setText("Biological Types:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        jPanel4.add(jLabel26, gridBagConstraints);

        FtypesComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "protein_coding", "unitary_pseudogene", "unprocessed_pseudogene", "processed_pseudogene", "transcribed_unprocessed_pseudogene", "processed_transcript", "antisense", "transcribed_unitary_pseudogene", "polymorphic_pseudogene", "lincRNA", "sense_intronic", "transcribed_processed_pseudogene", "sense_overlapping", "IG_V_pseudogene", "pseudogene", "TR_V_gene", "3prime_overlapping_ncRNA", "IG_V_gene", "bidirectional_promoter_lncRNA", "snRNA", "miRNA", "misc_RNA", "snoRNA", "rRNA", "IG_C_gene", "IG_J_gene", "TR_J_gene", "TR_C_gene", "TR_V_pseudogene", "TR_J_pseudogene", "IG_D_gene", "ribozyme", "IG_C_pseudogene", "TR_D_gene", "TEC", "IG_J_pseudogene", "scRNA", "scaRNA", "vaultRNA", "sRNA", "macro_lncRNA", "non_coding", "IG_pseudogene" }));
        FtypesComboBox.setToolTipText("");
        FtypesComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FtypesComboBoxActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 0.2;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        jPanel4.add(FtypesComboBox, gridBagConstraints);

        jLabel27.setText("Output Folder:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        jPanel4.add(jLabel27, gridBagConstraints);

        FOutputFolderText.setEditable(false);
        FOutputFolderText.setToolTipText("");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 0.4;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        jPanel4.add(FOutputFolderText, gridBagConstraints);

        Fbrowes.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pkg4seqgui/images/52b.png"))); // NOI18N
        Fbrowes.setText("Browse");
        Fbrowes.setToolTipText("");
        Fbrowes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FbrowesActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        gridBagConstraints.weighty = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        jPanel4.add(Fbrowes, gridBagConstraints);

        Fcancel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pkg4seqgui/images/33b.png"))); // NOI18N
        Fcancel.setText("Cancel");
        Fcancel.setToolTipText("");
        Fcancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FcancelActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.BASELINE_TRAILING;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        jPanel4.add(Fcancel, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        FPKMPanel.add(jPanel4, gridBagConstraints);

        FExecuteButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pkg4seqgui/images/exec.png"))); // NOI18N
        FExecuteButton.setText("Execute");
        FExecuteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FExecuteButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_END;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.weighty = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        FPKMPanel.add(FExecuteButton, gridBagConstraints);

        FSaveButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pkg4seqgui/images/86b.png"))); // NOI18N
        FSaveButton.setText("Save conf.");
        FSaveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FSaveButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_END;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        FPKMPanel.add(FSaveButton, gridBagConstraints);

        FResetButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pkg4seqgui/images/reset.png"))); // NOI18N
        FResetButton.setText("Reset");
        FResetButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FResetButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_END;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        FPKMPanel.add(FResetButton, gridBagConstraints);

        FCloseButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pkg4seqgui/images/close.png"))); // NOI18N
        FCloseButton.setText("Close");
        FCloseButton.setToolTipText("");
        FCloseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FCloseButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_END;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        FPKMPanel.add(FCloseButton, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.weighty = 0.1;
        add(FPKMPanel, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

    private void FAddFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FAddFileActionPerformed
        final JFileChooser fc = new JFileChooser();
        fc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        fc.setMultiSelectionEnabled(true);
        String curDir = getPreferences().get("open-dir", null);
        fc.setCurrentDirectory(curDir!=null ? new File(curDir) : null);

        if (fc.showOpenDialog(this)==JFileChooser.APPROVE_OPTION){
            File[] files = fc.getSelectedFiles();
            for (File file : files) {
                DefaultTableModel model = (DefaultTableModel) FPKMFileTable.getModel();
                model.addRow(new Object[]{file.toString(), "Cov.1", "Batch1"});
            }
        }
        curDir = fc.getCurrentDirectory().getAbsolutePath();
        getPreferences().put("open-dir", curDir);
        
    }//GEN-LAST:event_FAddFileActionPerformed

    private void jButton13ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton13ActionPerformed

        while( FPKMFileTable.getSelectedRowCount()!=0){
            int selectedRow = FPKMFileTable.getSelectedRow();
            DefaultTableModel model = (DefaultTableModel) FPKMFileTable.getModel();
            if(selectedRow != -1) {
                model.removeRow(selectedRow);
            }
        }
    }//GEN-LAST:event_jButton13ActionPerformed

    private void FbrowesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FbrowesActionPerformed
        JFileChooser openDir = new JFileChooser();
        if (!(FOutputFolderText.getText().equals(""))){
            File file =new File(FOutputFolderText.getText());
            if (file.isDirectory())
            openDir.setCurrentDirectory(file);
        }
        else
        {
            String curDir = getPreferences().get("open-dir", null);
            openDir.setCurrentDirectory(curDir!=null ? new File(curDir) : null);
        }
        openDir.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        if (openDir.showOpenDialog(this)==JFileChooser.APPROVE_OPTION){
            File f = openDir.getSelectedFile();
            FOutputFolderText.setText(String.valueOf(f));
        }
        getPreferences().put("open-dir",openDir.getCurrentDirectory().getAbsolutePath());
    }//GEN-LAST:event_FbrowesActionPerformed

    private void FcancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FcancelActionPerformed
        FOutputFolderText.setText("");
    }//GEN-LAST:event_FcancelActionPerformed

    private void FExecuteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FExecuteButtonActionPerformed
        if (FPKMFileTable.getRowCount()<2){
            JOptionPane.showMessageDialog(this, "You have to specified at least two folders","Error: Data  folders",JOptionPane.ERROR_MESSAGE);
            return;
        }
        if (FOutputFolderText.getText().isEmpty()){
            JOptionPane.showMessageDialog(this, "You have to specified an output folders","Error: Output folder",JOptionPane.ERROR_MESSAGE);
            return;
        }

        //execute code
        Runtime rt = Runtime.getRuntime();
        try{
            String[] cmd = {"/bin/bash","-c","  bash ./execFPKM.sh "};
            cmd[2]+="sample.folders=c\\(\\\"";
            cmd[2]+=FPKMFileTable.getModel().getValueAt(0,0).toString();
            for (int i = 1; i <  FPKMFileTable.getRowCount(); i++){
                cmd[2]+="\\\",\\\""+FPKMFileTable.getModel().getValueAt(i,0).toString();
            }
            cmd[2]+= "\\\"\\)";
            cmd[2]+=" covariates=c\\(\\\"";
            cmd[2]+=FPKMFileTable.getModel().getValueAt(0,1).toString();
            for (int i = 1; i <  FPKMFileTable.getRowCount(); i++){
                cmd[2]+="\\\",\\\""+FPKMFileTable.getModel().getValueAt(i,1).toString();
            }
            cmd[2]+= "\\\"\\)";

            cmd[2]+=" batch=c\\(\\\"";
            cmd[2]+=FPKMFileTable.getModel().getValueAt(0,2).toString();
            for (int i = 1; i <  FPKMFileTable.getRowCount(); i++){
                cmd[2]+="\\\",\\\""+FPKMFileTable.getModel().getValueAt(i,2).toString();
            }
            cmd[2]+= "\\\"\\)";

            cmd[2]+="  bio.type=\\\""+FtypesComboBox.getSelectedItem().toString()+"\\\"";
            cmd[2]+="  output.prefix=\\\""+FOutputFolderText.getText() + "\\\" " + FOutputFolderText.getText() +">& "+FOutputFolderText.getText()+"/outputExecution ";
            //ProcessStatus.setText(pr.toString());
            if (MainFrame.listProcRunning.size()<MainFrame.GS.getMaxSizelistProcRunning()){
                Process pr = rt.exec(cmd);
                System.out.println("Running PID:"+ MainFrame.getPidOfProcess(pr)+"\n");
                //System.out.println(cmd[2]+"\n");
                MainFrame.ElProcRunning tmp= new MainFrame.ElProcRunning("From samples to experiment ", FOutputFolderText.getText(),pr,MainFrame.listModel.getSize());
                MainFrame.listProcRunning.add(tmp);
                java.net.URL imgURL = getClass().getResource("/pkg4seqgui/images/running.png");
                ImageIcon image2 = new ImageIcon(imgURL);
                MainFrame.GL.setAvoidProcListValueChanged(-1);
                MainFrame.listModel.addElement(new MainFrame.ListEntry(" [Running]   "+tmp.toString(),"Running",tmp.path, image2 ));
                MainFrame.GL.setAvoidProcListValueChanged(0);
                if(MainFrame.listProcRunning.size()==1){
                    MainFrame.t=new Timer();
                    MainFrame.t.scheduleAtFixedRate(new MainFrame.MyTask(), 5000, 5000);
                }
            }
            else{
                MainFrame.ElProcWaiting tmp= new MainFrame.ElProcWaiting("From samples to experiment ",FOutputFolderText.getText(),cmd,MainFrame.listModel.getSize());
                MainFrame.listProcWaiting.add(tmp);
                java.net.URL imgURL = getClass().getResource("/pkg4seqgui/images/waiting.png");
                ImageIcon image2 = new ImageIcon(imgURL);
                MainFrame.GL.setAvoidProcListValueChanged(-1);
                MainFrame.listModel.addElement(new MainFrame.ListEntry(" [Waiting]   "+tmp.toString(),"Waiting",tmp.path,image2));
                MainFrame.GL.setAvoidProcListValueChanged(0);
            }
            MainFrame.GL.setAvoidProcListValueChanged(-1);
            MainFrame.ProcList.setModel(MainFrame.listModel);
            MainFrame.ProcList.setCellRenderer(new MainFrame.ListEntryCellRenderer());
            MainFrame.GL.setAvoidProcListValueChanged(0);
        }
        catch(IOException e) {
            JOptionPane.showMessageDialog(this, e.toString(),"Error execution",JOptionPane.ERROR_MESSAGE);
            System.out.println(e.toString());
        }

        JOptionPane.showMessageDialog(this, "From samples to experiment task was scheduled","Confermation",JOptionPane.INFORMATION_MESSAGE);

    }//GEN-LAST:event_FExecuteButtonActionPerformed

    private void FSaveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FSaveButtonActionPerformed
       // saveAsMenuItemActionPerformed(evt);
    }//GEN-LAST:event_FSaveButtonActionPerformed

    private void FResetButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FResetButtonActionPerformed
        FtypesComboBox.setSelectedIndex(0);
        while( FPKMFileTable.getRowCount()!=0){
            DefaultTableModel model = (DefaultTableModel) FPKMFileTable.getModel();
            model.removeRow(0);
        }
        FOutputFolderText.setText("");
    }//GEN-LAST:event_FResetButtonActionPerformed

    private void FCloseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FCloseButtonActionPerformed

        FtypesComboBox.setSelectedIndex(0);
        while( FPKMFileTable.getRowCount()!=0){
            DefaultTableModel model = (DefaultTableModel) FPKMFileTable.getModel();
            model.removeRow(0);
        }
        FOutputFolderText.setText("");
        //RESET FIELDS
        CardLayout card = (CardLayout)MainFrame.MainPanel.getLayout();
        card.show(MainFrame.MainPanel, "Empty");
        MainFrame.CurrentLayout="Empty";
        //   AnalysisTree.clearSelection();
    }//GEN-LAST:event_FCloseButtonActionPerformed

    private void FtypesComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FtypesComboBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_FtypesComboBoxActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton FAddFile;
    private javax.swing.JButton FCloseButton;
    private javax.swing.JButton FExecuteButton;
    private javax.swing.JTextField FOutputFolderText;
    public static javax.swing.JTable FPKMFileTable;
    private javax.swing.JPanel FPKMPanel;
    private javax.swing.JButton FResetButton;
    private javax.swing.JButton FSaveButton;
    private javax.swing.JButton Fbrowes;
    private javax.swing.JButton Fcancel;
    public static javax.swing.JComboBox<String> FtypesComboBox;
    private javax.swing.JButton jButton13;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane6;
    // End of variables declaration//GEN-END:variables
}
